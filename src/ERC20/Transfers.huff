// balls-insert-start
#define macro BALANCE_OF(z0) = takes(0) returns(0) {
    // takes:                      []
    0x20                        // [0x20]
    0x4                         // [0x20, 0x4]
    calldataload                // [0x20, owner]
    sload                       // [0x20, ownerBalance]
    <z0>                        // [0x20, ownerBalance, z0]
    mstore                      // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro TRANSFER(z0) = takes(0) returns(0) {
    // takes:                      []
    0x1                         // [0x1]
    <z0>                        // [0x1, z0]
    [ADDRESS_MASK]              // [0x1, z0, ADDRESS_MASK]
    0x4                         // [0x1, z0, ADDRESS_MASK, 0x4]
    calldataload                // [0x1, z0, ADDRESS_MASK, calldataload(0x4)]
    and                         // [0x1, z0, to]
    caller                      // [0x1, z0, to, caller()]
    [_TRANSFER_EVENT_SIGNATURE]
    //                             [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE]
    0x20                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20]
    <z0>                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0]
    0x24                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, 0x24]
    calldataload                // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount]
    dup1                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, amount]
    caller                      // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, amount, caller()]
    sload                       // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, amount, senderBalance]
    SAFE_SUB_ERR(<z0>, 0xf4d678b8)
    //                             [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, newSenderBalance]
    caller                      // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, newSenderBalance, caller()]
    sstore                      // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount]
    dup1                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, amount]
    dup7                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, amount, to]
    sload                       // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, amount, sload(to)]
    add                         // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, add(sload(to), amount)]
    dup7                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, add(sload(to), amount), to]
    sstore                      // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount]
    <z0>                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, z0]
    mstore                      // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0]
    log3                        // [0x1, z0]
    mstore                      // []
    0x20                        // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro TRANSFER_FROM(z0) = takes(0) returns(0) {
    // takes:                      []
    0x1                         // [0x1]
    0x44                        // [0x1, 0x44]
    calldataload                // [0x1, amount]
    [ADDRESS_MASK]              // [0x1, amount, ADDRESS_MASK]
    0x24                        // [0x1, amount, ADDRESS_MASK, 0x24]
    calldataload                // [0x1, amount, ADDRESS_MASK, calldataload(0x24)]
    and                         // [0x1, amount, to]
    [ADDRESS_MASK]              // [0x1, amount, to, ADDRESS_MASK]
    0x4                         // [0x1, amount, to, ADDRESS_MASK, 0x4]
    calldataload                // [0x1, amount, to, ADDRESS_MASK, calldataload(0x4)]
    and                         // [0x1, amount, to, from]
    dup3                        // [0x1, amount, to, from, amount]
    caller                      // [0x1, amount, to, from, amount, caller()]
    dup3                        // [0x1, amount, to, from, amount, caller(), from]
    _USE_ALLOWANCE(<z0>)        // [0x1, amount, to, from]
    _TRANSFER_FROM(<z0>, <z0>)  // [0x1]
    <z0>                        // [0x1, z0]
    mstore                      // []
    0x20                        // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro _TRANSFER_FROM(z0, memptr) = takes(3) returns(0) {
    // takes:                      [amount, to, from]
    swap1                       // [amount, from, to]
    swap2                       // [to, from, amount]
    dup1                        // [to, from, amount, amount]
    dup3                        // [to, from, amount, amount, from]
    sload                       // [to, from, amount, amount, fromBalance]
    SAFE_SUB_ERR(<z0>, 0xf4d678b8)
    //                             [to, from, amount, SAFE_SUB_ERR<z0, 0xf4d678b8>(fromBalance, amount)]
    dup2                        // [to, from, amount, SAFE_SUB_ERR<z0, 0xf4d678b8>(fromBalance, amount), amount]
    <memptr>                    // [to, from, amount, SAFE_SUB_ERR<z0, 0xf4d678b8>(fromBalance, amount), amount, memptr]
    mstore                      // [to, from, amount, SAFE_SUB_ERR<z0, 0xf4d678b8>(fromBalance, amount)]
    dup3                        // [to, from, amount, SAFE_SUB_ERR<z0, 0xf4d678b8>(fromBalance, amount), from]
    sstore                      // [to, from, amount]
    dup3                        // [to, from, amount, to]
    sload                       // [to, from, amount, sload(to)]
    add                         // [to, from, add(sload(to), amount)]
    dup3                        // [to, from, add(sload(to), amount), to]
    sstore                      // [to, from]
    [_TRANSFER_EVENT_SIGNATURE]
    //                             [to, from, _TRANSFER_EVENT_SIGNATURE]
    0x20                        // [to, from, _TRANSFER_EVENT_SIGNATURE, 0x20]
    <memptr>                    // [to, from, _TRANSFER_EVENT_SIGNATURE, 0x20, memptr]
    log3                        // []
    // returns:                    []
}
// balls-insert-end