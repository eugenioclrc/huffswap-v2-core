// balls-insert-start
#define macro TOTAL_SUPPLY(z0) = takes(0) returns(0) {
    // takes:                      []
    0x20                        // [0x20]
    [TOTAL_SUPPLY_SLOT]         // [0x20, TOTAL_SUPPLY_SLOT]
    sload                       // [0x20, sload(TOTAL_SUPPLY_SLOT)]
    <z0>                        // [0x20, sload(TOTAL_SUPPLY_SLOT), z0]
    mstore                      // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro _BURN(z0) = takes(2) returns(0) {
    // takes:                      [amount, from]
    <z0>                        // [amount, from, z0]
    swap2                       // [z0, from, amount]
    dup1                        // [z0, from, amount, amount]
    <z0>                        // [z0, from, amount, amount, z0]
    mstore                      // [z0, from, amount]
    dup2                        // [z0, from, amount, from]
    dup2                        // [z0, from, amount, from, amount]
    [TOTAL_SUPPLY_SLOT]         // [z0, from, amount, from, amount, TOTAL_SUPPLY_SLOT]
    sload                       // [z0, from, amount, from, amount, sload(TOTAL_SUPPLY_SLOT)]
    sub                         // [z0, from, amount, from, sub(sload(TOTAL_SUPPLY_SLOT), amount)]
    [TOTAL_SUPPLY_SLOT]         // [z0, from, amount, from, sub(sload(TOTAL_SUPPLY_SLOT), amount), TOTAL_SUPPLY_SLOT]
    sstore                      // [z0, from, amount, from]
    sload                       // [z0, from, amount, sload(from)]
    SAFE_SUB_ERR(<z0>, 0xf4d678b8)
    //                             [z0, from, SAFE_SUB_ERR<z0, 0xf4d678b8>(sload(from), amount)]
    dup2                        // [z0, from, SAFE_SUB_ERR<z0, 0xf4d678b8>(sload(from), amount), from]
    sstore                      // [z0, from]
    [_TRANSFER_EVENT_SIGNATURE]
    //                             [z0, from, _TRANSFER_EVENT_SIGNATURE]
    0x20                        // [z0, from, _TRANSFER_EVENT_SIGNATURE, 0x20]
    <z0>                        // [z0, from, _TRANSFER_EVENT_SIGNATURE, 0x20, z0]
    log3                        // []
    // returns:                    []
}

#define macro _MINT(z0) = takes(2) returns(0) {
    // takes:                      [amount, to]
    swap1                       // [to, amount]
    <z0>                        // [to, amount, z0]
    dup2                        // [to, amount, z0, amount]
    dup4                        // [to, amount, z0, amount, to]
    dup4                        // [to, amount, z0, amount, to, amount]
    [TOTAL_SUPPLY_SLOT]         // [to, amount, z0, amount, to, amount, TOTAL_SUPPLY_SLOT]
    sload                       // [to, amount, z0, amount, to, amount, sload(TOTAL_SUPPLY_SLOT)]
    SAFE_ADD(<z0>)              // [to, amount, z0, amount, to, SAFE_ADD<z0>(sload(TOTAL_SUPPLY_SLOT), amount)]
    [TOTAL_SUPPLY_SLOT]         // [to, amount, z0, amount, to, SAFE_ADD<z0>(sload(TOTAL_SUPPLY_SLOT), amount), TOTAL_SUPPLY_SLOT]
    sstore                      // [to, amount, z0, amount, to]
    sload                       // [to, amount, z0, amount, sload(to)]
    add                         // [to, amount, z0, add(sload(to), amount)]
    dup4                        // [to, amount, z0, add(sload(to), amount), to]
    sstore                      // [to, amount, z0]
    mstore                      // [to]
    <z0>                        // [to, z0]
    [_TRANSFER_EVENT_SIGNATURE]
    //                             [to, z0, _TRANSFER_EVENT_SIGNATURE]
    0x20                        // [to, z0, _TRANSFER_EVENT_SIGNATURE, 0x20]
    <z0>                        // [to, z0, _TRANSFER_EVENT_SIGNATURE, 0x20, z0]
    log3                        // []
    // returns:                    []
}
// balls-insert-end