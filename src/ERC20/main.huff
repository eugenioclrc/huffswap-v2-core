/// @title ERC20 Huffswap V2
/// @notice SPDX-License-Identifier: MIT
/// @author 0x4non
/// @notice Some ideas were taken from Solmate, Solady and Huffmate

#include "../libraries/SafeMath.huff"
#include "../libraries/Hash.huff"
#include "../Storage.huff"

// Interface

#define function name() nonpayable returns (string)
#define function symbol() nonpayable returns (string)
#define function decimals() nonpayable returns (uint256)

#define function totalSupply() nonpayable returns (uint256)

#define function allowance(address,address) view returns (uint256)
#define function balanceOf(address) view returns (uint256)
#define function totalSupply() view returns (uint256)

#define function approve(address,uint256) nonpayable returns ()
#define function transfer(address,uint256) nonpayable returns ()
#define function transferFrom(address,address,uint256) nonpayable returns ()

// ERC1363 Payable token
#define function approveAndCall(address,uint256,bytes) nonpayable returns ()
#define function transferAndCall(address,uint256,bytes) nonpayable returns ()

// Events
#define event Approval(address indexed, address indexed, uint256)
#define event Transfer(address, address, uint256)

// Errors
#define error InsufficientBalance()
#define error InsufficientAllowance()

#define constant ADDRESS_MASK = 0xffffffffffffffffffffffffffffffffffffffff

#define macro DECIMALS(z0) = takes(0) returns(0) {
    // takes:                      []
    0x20                        // [0x20]
    <z0>                        // [0x20, z0]
    0x12                        // [0x20, z0, 0x12]
    <z0>                        // [0x20, z0, 0x12, z0]
    mstore                      // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro NAME(z0) = takes(0) returns(0) {
    // takes:                      []
    0xf487566665377617020506169725632
    //                             [0xf487566665377617020506169725632]
    0x20                        // [0xf487566665377617020506169725632, 0x20]
    <z0>                        // [0xf487566665377617020506169725632, 0x20, z0]
    mstore                      // [0xf487566665377617020506169725632]
    0x2f                        // [0xf487566665377617020506169725632, 0x2f]
    mstore                      // []
    0x60                        // [0x60]
    <z0>                        // [0x60, z0]
    return                      // []
    // returns:                    []
}

#define macro SYMBOL(z0) = takes(0) returns(0) {
    // takes:                      []
    0xb48554646535741502d5632   // [0xb48554646535741502d5632]
    0x20                        // [0xb48554646535741502d5632, 0x20]
    <z0>                        // [0xb48554646535741502d5632, 0x20, z0]
    mstore                      // [0xb48554646535741502d5632]
    0x2b                        // [0xb48554646535741502d5632, 0x2b]
    mstore                      // []
    0x60                        // [0x60]
    <z0>                        // [0x60, z0]
    return                      // []
    // returns:                    []
}
#define macro ALLOWANCE(z0) = takes(0) returns(0) {
    // takes:                      []
    0x20                        // [0x20]
    0x24                        // [0x20, 0x24]
    calldataload                // [0x20, spender]
    0x4                         // [0x20, spender, 0x4]
    calldataload                // [0x20, spender, owner]
    GET_SLOT_FROM_KEYS(<z0>)    // [0x20, allowanceSlot]
    sload                       // [0x20, allowanceAmount]
    <z0>                        // [0x20, allowanceAmount, z0]
    mstore                      // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro APPROVE(z0) = takes(0) returns(0) {
    // takes:                      []
    0x20                        // [0x20]
    0x1                         // [0x20, 0x1]
    <z0>                        // [0x20, 0x1, z0]
    0x4                         // [0x20, 0x1, z0, 0x4]
    calldataload                // [0x20, 0x1, z0, spender]
    0x24                        // [0x20, 0x1, z0, spender, 0x24]
    calldataload                // [0x20, 0x1, z0, spender, amount]
    <z0>                        // [0x20, 0x1, z0, spender, amount, z0]
    dup2                        // [0x20, 0x1, z0, spender, amount, z0, amount]
    dup4                        // [0x20, 0x1, z0, spender, amount, z0, amount, spender]
    caller                      // [0x20, 0x1, z0, spender, amount, z0, amount, spender, caller()]
    GET_SLOT_FROM_KEYS(<z0>)    // [0x20, 0x1, z0, spender, amount, z0, amount, allowanceSlot]
    sstore                      // [0x20, 0x1, z0, spender, amount, z0]
    mstore                      // [0x20, 0x1, z0, spender]
    caller                      // [0x20, 0x1, z0, spender, caller()]
    __EVENT_HASH(Approval)
    //                             [0x20, 0x1, z0, spender, caller(), _APPROVAL_EVENT_SIGNATURE]
    0x20                        // [0x20, 0x1, z0, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20]
    <z0>                        // [0x20, 0x1, z0, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20, z0]
    log3                        // [0x20, 0x1, z0]
    mstore                      // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro _USE_ALLOWANCE(z0) = takes(3) returns(0) {
    // takes:                      [amount, spender, owner]
    GET_SLOT_FROM_KEYS(<z0>)    // [amount, allowanceSlot]
    dup1                        // [amount, allowanceSlot, allowanceSlot]
    sload                       // [amount, allowanceSlot, allowanceAmount]
    swap1                       // [amount, allowanceAmount, allowanceSlot]
    _SKIP_IF_INFINITY_ALLOWANCE(<z0>)
    //                             []
    // returns:                    []
}
#define macro _SKIP_IF_INFINITY_ALLOWANCE(z0) = takes(3) returns(3) {
    dup2 <z0> not eq skipInfityAllowanceJump jumpi
    // takes:                      [amount, allowanceAmount, allowanceSlot]
    dup3                        // [amount, allowanceAmount, allowanceSlot, amount]
    dup3                        // [amount, allowanceAmount, allowanceSlot, amount, allowanceAmount]
    SAFE_SUB_ERR(<z0>, 0x13be252b)
    //                             [amount, allowanceAmount, allowanceSlot, newAllowanceAmount]
    dup2                        // [amount, allowanceAmount, allowanceSlot, newAllowanceAmount, allowanceSlot]
    sstore                      // [amount, allowanceAmount, allowanceSlot]
    // returns:                    [amount, allowanceAmount, allowanceSlot]
    skipInfityAllowanceJump:
    pop pop pop
    // returns:                    []    
}#define macro BALANCE_OF(z0) = takes(0) returns(0) {
    // takes:                      []
    0x20                        // [0x20]
    0x4                         // [0x20, 0x4]
    calldataload                // [0x20, owner]
    sload                       // [0x20, ownerBalance]
    <z0>                        // [0x20, ownerBalance, z0]
    mstore                      // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro TRANSFER(z0) = takes(0) returns(0) {
    // takes:                      []
    0x1                         // [0x1]
    <z0>                        // [0x1, z0]
    [ADDRESS_MASK]              // [0x1, z0, ADDRESS_MASK]
    0x4                         // [0x1, z0, ADDRESS_MASK, 0x4]
    calldataload                // [0x1, z0, ADDRESS_MASK, calldataload(0x4)]
    and                         // [0x1, z0, to]
    caller                      // [0x1, z0, to, caller()]
    __EVENT_HASH(Transfer)
    //                             [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE]
    0x20                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20]
    <z0>                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0]
    0x24                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, 0x24]
    calldataload                // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount]
    dup1                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, amount]
    caller                      // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, amount, caller()]
    sload                       // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, amount, senderBalance]
    SAFE_SUB_ERR(<z0>, 0xf4d678b8)
    //                             [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, newSenderBalance]
    caller                      // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, newSenderBalance, caller()]
    sstore                      // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount]
    dup1                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, amount]
    dup7                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, amount, to]
    sload                       // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, amount, sload(to)]
    add                         // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, add(sload(to), amount)]
    dup7                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, add(sload(to), amount), to]
    sstore                      // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount]
    <z0>                        // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0, amount, z0]
    mstore                      // [0x1, z0, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0]
    log3                        // [0x1, z0]
    mstore                      // []
    0x20                        // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro TRANSFER_FROM(z0) = takes(0) returns(0) {
    // takes:                      []
    0x44                        // [0x44]
    calldataload                // [amount]
    caller                      // [amount, caller()]
    [ADDRESS_MASK]              // [amount, caller(), ADDRESS_MASK]
    0x4                         // [amount, caller(), ADDRESS_MASK, 0x4]
    calldataload                // [amount, caller(), ADDRESS_MASK, calldataload(0x4)]
    and                         // [amount, caller(), from]
    dup3                        // [amount, caller(), from, amount]
    dup2                        // [amount, caller(), from, amount, from]
    sload                       // [amount, caller(), from, amount, fromBalance]
    SAFE_SUB_ERR(<z0>, 0xf4d678b8)
    //                             [amount, caller(), from, newfromBalance]
    dup2                        // [amount, caller(), from, newfromBalance, from]
    sstore                      // [amount, caller(), from]
    [ADDRESS_MASK]              // [amount, caller(), from, ADDRESS_MASK]
    0x24                        // [amount, caller(), from, ADDRESS_MASK, 0x24]
    calldataload                // [amount, caller(), from, ADDRESS_MASK, calldataload(0x24)]
    and                         // [amount, caller(), from, to]
    dup2                        // [amount, caller(), from, to, from]
    __EVENT_HASH(Transfer)
    //                             [amount, caller(), from, to, from, _TRANSFER_EVENT_SIGNATURE]
    0x20                        // [amount, caller(), from, to, from, _TRANSFER_EVENT_SIGNATURE, 0x20]
    dup7                        // [amount, caller(), from, to, from, _TRANSFER_EVENT_SIGNATURE, 0x20, amount]
    <z0>                        // [amount, caller(), from, to, from, _TRANSFER_EVENT_SIGNATURE, 0x20, amount, z0]
    dup9                        // [amount, caller(), from, to, from, _TRANSFER_EVENT_SIGNATURE, 0x20, amount, z0, amount]
    dup7                        // [amount, caller(), from, to, from, _TRANSFER_EVENT_SIGNATURE, 0x20, amount, z0, amount, to]
    sload                       // [amount, caller(), from, to, from, _TRANSFER_EVENT_SIGNATURE, 0x20, amount, z0, amount, sload(to)]
    add                         // [amount, caller(), from, to, from, _TRANSFER_EVENT_SIGNATURE, 0x20, amount, z0, add(sload(to), amount)]
    dup7                        // [amount, caller(), from, to, from, _TRANSFER_EVENT_SIGNATURE, 0x20, amount, z0, add(sload(to), amount), to]
    sstore                      // [amount, caller(), from, to, from, _TRANSFER_EVENT_SIGNATURE, 0x20, amount, z0]
    mstore                      // [amount, caller(), from, to, from, _TRANSFER_EVENT_SIGNATURE, 0x20]
    <z0>                        // [amount, caller(), from, to, from, _TRANSFER_EVENT_SIGNATURE, 0x20, z0]
    log3                        // [amount, caller(), from]
    _USE_ALLOWANCE(<z0>)        // [_USE_ALLOWANCE<z0>(from, caller(), amount)]
    pop                         // []
    0x20                        // [0x20]
    0x1                         // [0x20, 0x1]
    <z0>                        // [0x20, 0x1, z0]
    mstore                      // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}
#define macro TOTAL_SUPPLY(z0) = takes(0) returns(0) {
    // takes:                      []
    0x20                        // [0x20]
    [TOTAL_SUPPLY_SLOT]         // [0x20, TOTAL_SUPPLY_SLOT]
    sload                       // [0x20, sload(TOTAL_SUPPLY_SLOT)]
    <z0>                        // [0x20, sload(TOTAL_SUPPLY_SLOT), z0]
    mstore                      // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro _BURN(z0) = takes(2) returns(0) {
    // takes:                      [amount, from]
    <z0>                        // [amount, from, z0]
    swap2                       // [z0, from, amount]
    dup1                        // [z0, from, amount, amount]
    <z0>                        // [z0, from, amount, amount, z0]
    mstore                      // [z0, from, amount]
    dup2                        // [z0, from, amount, from]
    dup2                        // [z0, from, amount, from, amount]
    [TOTAL_SUPPLY_SLOT]         // [z0, from, amount, from, amount, TOTAL_SUPPLY_SLOT]
    sload                       // [z0, from, amount, from, amount, sload(TOTAL_SUPPLY_SLOT)]
    sub                         // [z0, from, amount, from, sub(sload(TOTAL_SUPPLY_SLOT), amount)]
    [TOTAL_SUPPLY_SLOT]         // [z0, from, amount, from, sub(sload(TOTAL_SUPPLY_SLOT), amount), TOTAL_SUPPLY_SLOT]
    sstore                      // [z0, from, amount, from]
    sload                       // [z0, from, amount, sload(from)]
    SAFE_SUB_ERR(<z0>, 0xf4d678b8)
    //                             [z0, from, SAFE_SUB_ERR<z0, 0xf4d678b8>(sload(from), amount)]
    dup2                        // [z0, from, SAFE_SUB_ERR<z0, 0xf4d678b8>(sload(from), amount), from]
    sstore                      // [z0, from]
    __EVENT_HASH(Transfer)
    //                             [z0, from, _TRANSFER_EVENT_SIGNATURE]
    0x20                        // [z0, from, _TRANSFER_EVENT_SIGNATURE, 0x20]
    <z0>                        // [z0, from, _TRANSFER_EVENT_SIGNATURE, 0x20, z0]
    log3                        // []
    // returns:                    []
}

#define macro _MINT(z0) = takes(2) returns(0) {
    // takes:                      [amount, to]
    swap1                       // [to, amount]
    <z0>                        // [to, amount, z0]
    dup2                        // [to, amount, z0, amount]
    dup4                        // [to, amount, z0, amount, to]
    dup4                        // [to, amount, z0, amount, to, amount]
    [TOTAL_SUPPLY_SLOT]         // [to, amount, z0, amount, to, amount, TOTAL_SUPPLY_SLOT]
    sload                       // [to, amount, z0, amount, to, amount, sload(TOTAL_SUPPLY_SLOT)]
    SAFE_ADD(<z0>)              // [to, amount, z0, amount, to, SAFE_ADD<z0>(sload(TOTAL_SUPPLY_SLOT), amount)]
    [TOTAL_SUPPLY_SLOT]         // [to, amount, z0, amount, to, SAFE_ADD<z0>(sload(TOTAL_SUPPLY_SLOT), amount), TOTAL_SUPPLY_SLOT]
    sstore                      // [to, amount, z0, amount, to]
    sload                       // [to, amount, z0, amount, sload(to)]
    add                         // [to, amount, z0, add(sload(to), amount)]
    dup4                        // [to, amount, z0, add(sload(to), amount), to]
    sstore                      // [to, amount, z0]
    mstore                      // [to]
    <z0>                        // [to, z0]
    __EVENT_HASH(Transfer)
    //                             [to, z0, _TRANSFER_EVENT_SIGNATURE]
    0x20                        // [to, z0, _TRANSFER_EVENT_SIGNATURE, 0x20]
    <z0>                        // [to, z0, _TRANSFER_EVENT_SIGNATURE, 0x20, z0]
    log3                        // []
    // returns:                    []
}
