// balls-insert-start
#define macro SUPPORTS_INTERFACE_LP(z0) = takes(0) returns(0) {
    // takes:                      []
    0x4                         // [0x4]
    calldataload                // [calldataload(0x4)]
    0xe0                        // [calldataload(0x4), 0xe0]
    shr                         // [s]
    0x36372b07                  // [s, 0x36372b07]
    dup2                        // [s, 0x36372b07, s]
    eq                          // [s, eq(s, 0x36372b07)]
    0x1ffc9a7                   // [s, eq(s, 0x36372b07), 0x1ffc9a7]
    dup3                        // [s, eq(s, 0x36372b07), 0x1ffc9a7, s]
    eq                          // [s, eq(s, 0x36372b07), result]
    or                          // [s, result]
    dup2                        // [s, result, s]
    0x7d4c6ff5                  // [s, result, s, 0x7d4c6ff5]
    eq                          // [s, result, eq(0x7d4c6ff5, s)]
    swap2                       // [eq(0x7d4c6ff5, s), result, s]
    0xb0202a11                  // [eq(0x7d4c6ff5, s), result, s, 0xb0202a11]
    eq                          // [eq(0x7d4c6ff5, s), result, eq(0xb0202a11, s)]
    or                          // [eq(0x7d4c6ff5, s), result]
    or                          // [result]
    <z0>                        // [result, z0]
    mstore                      // []
    0x20                        // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro SUPPORTS_INTERFACE_PAYABLE_TOKEN(z0) = takes(0) returns(0) {
    // takes:                      []
    0x20                        // [0x20]
    <z0>                        // [0x20, z0]
    0x4                         // [0x20, z0, 0x4]
    calldataload                // [0x20, z0, calldataload(0x4)]
    0xe0                        // [0x20, z0, calldataload(0x4), 0xe0]
    shr                         // [0x20, z0, s]
    0x1ffc9a7                   // [0x20, z0, s, 0x1ffc9a7]
    dup2                        // [0x20, z0, s, 0x1ffc9a7, s]
    eq                          // [0x20, z0, s, result]
    dup2                        // [0x20, z0, s, result, s]
    0xb0202a11                  // [0x20, z0, s, result, s, 0xb0202a11]
    eq                          // [0x20, z0, s, result, eq(0xb0202a11, s)]
    swap2                       // [0x20, z0, eq(0xb0202a11, s), result, s]
    0x36372b07                  // [0x20, z0, eq(0xb0202a11, s), result, s, 0x36372b07]
    eq                          // [0x20, z0, eq(0xb0202a11, s), result, eq(0x36372b07, s)]
    or                          // [0x20, z0, eq(0xb0202a11, s), result]
    or                          // [0x20, z0, result]
    <z0>                        // [0x20, z0, result, z0]
    mstore                      // [0x20, z0]
    return                      // []
    // returns:                    []
}
// balls-insert-end