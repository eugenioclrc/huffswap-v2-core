extern _REQUIRE(z0, err) stack(1, 0) writes(CONTROL_FLOW)

fn SAFE_ADD<z0>(num1, num2) -> (result) {
    // bytes4(keccak256("Overflow()")) == 0x35278d12
    result = SAFE_ADD_ERR<z0, 0x35278d12>(num1, num2)
}

fn SAFE_ADD_ERR<z0, err>(num1, num2) -> (result) {
    result = add(num1, num2)
    not_overflow = iszero(lt(result, num2))
    _REQUIRE<z0, err>(not_overflow)
}

fn SAFE_SUB<z0>(num1, num2) -> (result) {
    // bytes4(keccak256("Overflow()")) == 0x35278d12
    result = SAFE_SUB_ERR<z0, 0x35278d12>(num1, num2)
}

fn SAFE_SUB_ERR<z0, err>(num1, num2) -> (result) {
    result = sub(num1, num2)
    not_overflow = iszero(gt(result, num1))
    _REQUIRE<z0, err>(not_overflow)
}

fn SAFE_MUL<z0>(num1, num2) -> (result) {
    // bytes4(keccak256("Overflow()")) == 0x35278d12
    result = SAFE_MUL_ERR<z0, 0x35278d12>(num1, num2)
}

fn SAFE_MUL_ERR<z0, err>(num1, num2) -> (result) {    
    result = mul(num1, num2)
    
    // if num1 == 0 then use 1 to div and check overflow
    not_overflow = eq(div(result, num1), TERNARY(z0, iszero(num1), num2))
    _REQUIRE<z0, err>(not_overflow)
}

fn SAFE_DIV<z0>(num1, num2) -> (result) {
    // bytes4(keccak256("DivitionByZero()")) == 0x0b15018f
    result = SAFE_DIV_ERR<z0, 0x0b15018f>(num1, num2)
}

fn SAFE_DIV_ERR<z0, err>(num1, num2) -> (result) {
    //if num2 == 0 revert
    _REQUIRE<z0, err>(num2)
    result = div(num1, num2)
}

/*
    /// @dev Returns `floor(x * y / d)`.
    /// Reverts if `x * y` overflows, or `d` is zero.
    /// taken from solady
*/
fn MUL_DIV<z0>(x, y, d) -> (result) {
    z = mul(x, y)
    // Equivalent to `require(d != 0 && (y == 0 || x <= type(uint256).max / y))`.
    not_overflow = mul(or(iszero(x), eq(div(z, x), y)), d)
    // MulDivFailed() == 0xad251c27
    _REQUIRE<z0, 0xad251c27>(not_overflow)
    result = div(z, d)
}


fn TERNARY(true_value, condition, false_value) -> (result) {
    result = xor(
        false_value,
        mul(condition, xor(true_value, false_value))
    )
}

fn MAX(num1, num2) -> (ret) {
    ret = TERNARY(num1, gt(num1, num2), num2)
}

fn MIN(num1, num2) -> (ret) {
    ret = TERNARY(num1, lt(num1, num2), num2)
}


// implementation from solady
fn SQRT(x) -> (z) {
  // `floor(sqrt(2**15)) = 181`. `sqrt(2**15) - 181 = 2.84`.
  z = 181 // The "correct" value is 1, but this saves a multiplication later.

  // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad
  // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.

  // Let `y = x / 2**r`. We check `y >= 2**(k + 8)`
  // but shift right by `k` bits to ensure that if `x >= 256`, then `y >= 256`.
  r = shl(7, lt(0xffffffffffffffffffffffffffffffffff, x))
  r = or(r, shl(6, lt(0xffffffffffffffffff, shr(r, x))))
  r = or(r, shl(5, lt(0xffffffffff, shr(r, x))))
  r = or(r, shl(4, lt(0xffffff, shr(r, x))))
  z = shl(shr(1, r), z)

  // Goal was to get `z*z*y` within a small factor of `x`. More iterations could
  // get y in a tighter range. Currently, we will have y in `[256, 256*(2**16))`.
  // We ensured `y >= 256` so that the relative difference between `y` and `y+1` is small.
  // That's not possible if `x < 256` but we can just verify those cases exhaustively.

  // Now, `z*z*y <= x < z*z*(y+1)`, and `y <= 2**(16+8)`, and either `y >= 256`, or `x < 256`.
  // Correctness can be checked exhaustively for `x < 256`, so we assume `y >= 256`.
  // Then `z*sqrt(y)` is within `sqrt(257)/sqrt(256)` of `sqrt(x)`, or about 20bps.

  // For `s` in the range `[1/256, 256]`, the estimate `f(s) = (181/1024) * (s+1)`
  // is in the range `(1/2.84 * sqrt(s), 2.84 * sqrt(s))`,
  // with largest error when `s = 1` and when `s = 256` or `1/256`.

  // Since `y` is in `[256, 256*(2**16))`, let `a = y/65536`, so that `a` is in `[1/256, 256)`.
  // Then we can estimate `sqrt(y)` using
  // `sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2**18`.

  // There is no overflow risk here since `y < 2**136` after the first branch above.
  z = shr(18, mul(z, add(shr(r, x), 65536))) // A `mul()` is saved from starting `z` at 181.

  // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.
  z = shr(1, add(z, div(x, z)))
  z = shr(1, add(z, div(x, z)))
  z = shr(1, add(z, div(x, z)))
  z = shr(1, add(z, div(x, z)))
  z = shr(1, add(z, div(x, z)))
  z = shr(1, add(z, div(x, z)))
  z = shr(1, add(z, div(x, z)))

  // If `x+1` is a perfect square, the Babylonian method cycles between
  // `floor(sqrt(x))` and `ceil(sqrt(x))`. This statement ensures we return floor.
  // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division
  z = sub(z, lt(div(x, z), z))
}