// balls-insert-start
#define macro MAX() = takes(2) returns(1) {
    // takes:                      [num2, num1]
    dup2                        // [num2, num1, num2]
    dup2                        // [num2, num1, num2, num1]
    gt                          // [num2, num1, gt(num1, num2)]
    swap1                       // [num2, gt(num1, num2), num1]
    TERNARY()                   // [ret]
    // returns:                    [ret]
}

#define macro MIN() = takes(2) returns(1) {
    // takes:                      [num2, num1]
    dup2                        // [num2, num1, num2]
    dup2                        // [num2, num1, num2, num1]
    lt                          // [num2, num1, lt(num1, num2)]
    swap1                       // [num2, lt(num1, num2), num1]
    TERNARY()                   // [ret]
    // returns:                    [ret]
}

#define macro MUL_DIV(z0) = takes(3) returns(1) {
    // takes:                      [d, y, x]
    dup1                        // [d, y, x, x]
    iszero                      // [d, y, x, iszero(x)]
    dup3                        // [d, y, x, iszero(x), y]
    dup3                        // [d, y, x, iszero(x), y, x]
    mul                         // [d, y, x, iszero(x), z]
    swap3                       // [d, z, x, iszero(x), y]
    dup5                        // [d, z, x, iszero(x), y, d]
    swap3                       // [d, z, d, iszero(x), y, x]
    dup5                        // [d, z, d, iszero(x), y, x, z]
    div                         // [d, z, d, iszero(x), y, div(z, x)]
    eq                          // [d, z, d, iszero(x), eq(div(z, x), y)]
    or                          // [d, z, d, or(eq(div(z, x), y), iszero(x))]
    mul                         // [d, z, not_overflow]
    REQUIRE(<z0>, 0xad251c27)  // [d, z]
    div                         // [result]
    // returns:                    [result]
}

#define macro SAFE_ADD(z0) = takes(2) returns(1) {
    // takes:                      [num2, num1]
    SAFE_ADD_ERR(<z0>, 0x35278d12)
    //                             [result]
    // returns:                    [result]
}

#define macro SAFE_ADD_ERR(z0, err) = takes(2) returns(1) {
    // takes:                      [num2, num1]
    dup2                        // [num2, num1, num2]
    add                         // [num2, result]
    swap1                       // [result, num2]
    dup2                        // [result, num2, result]
    lt                          // [result, lt(result, num2)]
    iszero                      // [result, not_overflow]
    REQUIRE(<z0>, <err>)       // [result]
    // returns:                    [result]
}

#define macro SAFE_DIV(z0) = takes(2) returns(1) {
    // takes:                      [num2, num1]
    SAFE_DIV_ERR(<z0>, 0xb15018f)
    //                             [result]
    // returns:                    [result]
}

#define macro SAFE_DIV_ERR(z0, err) = takes(2) returns(1) {
    // takes:                      [num2, num1]
    dup2                        // [num2, num1, num2]
    REQUIRE(<z0>, <err>)       // [num2, num1]
    div                         // [result]
    // returns:                    [result]
}

#define macro SAFE_MUL(z0) = takes(2) returns(1) {
    // takes:                      [num2, num1]
    SAFE_MUL_ERR(<z0>, 0x35278d12)
    //                             [result]
    // returns:                    [result]
}

#define macro SAFE_MUL_ERR(z0, err) = takes(2) returns(1) {
    // takes:                      [num2, num1]
    dup1                        // [num2, num1, num1]
    dup3                        // [num2, num1, num1, num2]
    mul                         // [num2, num1, result]
    swap2                       // [result, num1, num2]
    dup2                        // [result, num1, num2, num1]
    dup4                        // [result, num1, num2, num1, result]
    div                         // [result, num1, num2, div(result, num1)]
    swap2                       // [result, div(result, num1), num2, num1]
    iszero                      // [result, div(result, num1), num2, iszero(num1)]
    <z0>                        // [result, div(result, num1), num2, iszero(num1), z0]
    TERNARY()                   // [result, div(result, num1), TERNARY<>(z0, iszero(num1), num2)]
    eq                          // [result, not_overflow]
    REQUIRE(<z0>, <err>)       // [result]
    // returns:                    [result]
}

#define macro SAFE_SUB(z0) = takes(2) returns(1) {
    // takes:                      [num2, num1]
    SAFE_SUB_ERR(<z0>, 0x35278d12)
    //                             [result]
    // returns:                    [result]
}

#define macro SAFE_SUB_ERR(z0, err) = takes(2) returns(1) {
    // takes:                      [num2, num1]
    swap1                       // [num1, num2]
    dup2                        // [num1, num2, num1]
    sub                         // [num1, result]
    swap1                       // [result, num1]
    dup2                        // [result, num1, result]
    gt                          // [result, gt(result, num1)]
    iszero                      // [result, not_overflow]
    REQUIRE(<z0>, <err>)       // [result]
    // returns:                    [result]
}

#define macro SQRT() = takes(1) returns(1) {
    // takes:                      [x]
    dup1                        // [x, x]
    0xffffffffffffffffffffffffffffffffff
    //                             [x, x, 0xffffffffffffffffffffffffffffffffff]
    lt                          // [x, lt(0xffffffffffffffffffffffffffffffffff, x)]
    0x7                         // [x, lt(0xffffffffffffffffffffffffffffffffff, x), 0x7]
    shl                         // [x, r]
    dup2                        // [x, r, x]
    dup2                        // [x, r, x, r]
    shr                         // [x, r, shr(r, x)]
    0xffffffffffffffffff        // [x, r, shr(r, x), 0xffffffffffffffffff]
    lt                          // [x, r, lt(0xffffffffffffffffff, shr(r, x))]
    0x6                         // [x, r, lt(0xffffffffffffffffff, shr(r, x)), 0x6]
    shl                         // [x, r, shl(0x6, lt(0xffffffffffffffffff, shr(r, x)))]
    or                          // [x, r]
    dup2                        // [x, r, x]
    dup2                        // [x, r, x, r]
    shr                         // [x, r, shr(r, x)]
    0xffffffffff                // [x, r, shr(r, x), 0xffffffffff]
    lt                          // [x, r, lt(0xffffffffff, shr(r, x))]
    0x5                         // [x, r, lt(0xffffffffff, shr(r, x)), 0x5]
    shl                         // [x, r, shl(0x5, lt(0xffffffffff, shr(r, x)))]
    or                          // [x, r]
    dup2                        // [x, r, x]
    dup2                        // [x, r, x, r]
    shr                         // [x, r, shr(r, x)]
    0xffffff                    // [x, r, shr(r, x), 0xffffff]
    lt                          // [x, r, lt(0xffffff, shr(r, x))]
    0x4                         // [x, r, lt(0xffffff, shr(r, x)), 0x4]
    shl                         // [x, r, shl(0x4, lt(0xffffff, shr(r, x)))]
    or                          // [x, r]
    0xb5                        // [x, r, z]
    dup3                        // [x, r, z, x]
    dup3                        // [x, r, z, x, r]
    shr                         // [x, r, z, shr(r, x)]
    0x10000                     // [x, r, z, shr(r, x), 0x10000]
    add                         // [x, r, z, add(0x10000, shr(r, x))]
    swap2                       // [x, add(0x10000, shr(r, x)), z, r]
    0x1                         // [x, add(0x10000, shr(r, x)), z, r, 0x1]
    shr                         // [x, add(0x10000, shr(r, x)), z, shr(0x1, r)]
    shl                         // [x, add(0x10000, shr(r, x)), z]
    mul                         // [x, mul(z, add(0x10000, shr(r, x)))]
    0x12                        // [x, mul(z, add(0x10000, shr(r, x))), 0x12]
    shr                         // [x, z]
    dup1                        // [x, z, z]
    dup3                        // [x, z, z, x]
    div                         // [x, z, div(x, z)]
    add                         // [x, add(div(x, z), z)]
    0x1                         // [x, add(div(x, z), z), 0x1]
    shr                         // [x, z]
    dup1                        // [x, z, z]
    dup3                        // [x, z, z, x]
    div                         // [x, z, div(x, z)]
    add                         // [x, add(div(x, z), z)]
    0x1                         // [x, add(div(x, z), z), 0x1]
    shr                         // [x, z]
    dup1                        // [x, z, z]
    dup3                        // [x, z, z, x]
    div                         // [x, z, div(x, z)]
    add                         // [x, add(div(x, z), z)]
    0x1                         // [x, add(div(x, z), z), 0x1]
    shr                         // [x, z]
    dup1                        // [x, z, z]
    dup3                        // [x, z, z, x]
    div                         // [x, z, div(x, z)]
    add                         // [x, add(div(x, z), z)]
    0x1                         // [x, add(div(x, z), z), 0x1]
    shr                         // [x, z]
    dup1                        // [x, z, z]
    dup3                        // [x, z, z, x]
    div                         // [x, z, div(x, z)]
    add                         // [x, add(div(x, z), z)]
    0x1                         // [x, add(div(x, z), z), 0x1]
    shr                         // [x, z]
    dup1                        // [x, z, z]
    dup3                        // [x, z, z, x]
    div                         // [x, z, div(x, z)]
    add                         // [x, add(div(x, z), z)]
    0x1                         // [x, add(div(x, z), z), 0x1]
    shr                         // [x, z]
    dup1                        // [x, z, z]
    dup3                        // [x, z, z, x]
    div                         // [x, z, div(x, z)]
    add                         // [x, add(div(x, z), z)]
    0x1                         // [x, add(div(x, z), z), 0x1]
    shr                         // [x, z]
    dup1                        // [x, z, z]
    swap2                       // [z, z, x]
    div                         // [z, div(x, z)]
    dup2                        // [z, div(x, z), z]
    gt                          // [z, gt(z, div(x, z))]
    swap1                       // [gt(z, div(x, z)), z]
    sub                         // [z]
    // returns:                    [z]
}

#define macro TERNARY() = takes(3) returns(1) {
    // takes:                      [false_value, condition, true_value]
    dup3                        // [false_value, condition, true_value, false_value]
    xor                         // [false_value, condition, xor(false_value, true_value)]
    mul                         // [false_value, mul(xor(false_value, true_value), condition)]
    xor                         // [result]
    // returns:                    [result]
}
// balls-insert-end