#include "../libraries/SafeMath.huff"
#include "../libraries/Errors.huff"


// #define function safeAddErr(uint256,uint256,bytes4) view returns (uint256)
#define function safeAdd(uint256,uint256) view returns (uint256)
#define function safeSub(uint256,uint256) view returns (uint256)
#define function safeMul(uint256,uint256) view returns (uint256)
#define function safeDiv(uint256,uint256) view returns (uint256)
// #define function sqrt(uint256) view returns (uint256)
#define function mulDiv(uint256,uint256,uint256) view returns (uint256)

#define macro MAIN() = takes (1) returns (1) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr          // [func_sig]

    dup1 __FUNC_SIG(safeAdd)              eq safeAddJump             jumpi
    dup1 __FUNC_SIG(safeSub)              eq safeSubJump             jumpi
    dup1 __FUNC_SIG(safeMul)              eq safeMulJump             jumpi
    dup1 __FUNC_SIG(safeDiv)              eq safeDivJump             jumpi
    dup1 __FUNC_SIG(mulDiv)               eq mulDivJump              jumpi
    

    0xffffffff 0x00 mstore
    0x04 0x1c revert


    safeAddJump:
      0x24 calldataload       // [num2]
      0x04 calldataload       // [num1]
      SAFE_ADD(0x00) 
      0x00 mstore
      0x20 0x00 return

    safeSubJump:
      0x24 calldataload       // [num2]
      0x04 calldataload       // [num2, num1]
      SAFE_SUB(0x00) 
      0x00 mstore
      0x20 0x00 return

    safeMulJump:
      0x24 calldataload       // [num2]
      0x04 calldataload       // [num2, num1]
      SAFE_MUL(0x00) 
      0x00 mstore
      0x20 0x00 return
  
    safeDivJump:
      0x24 calldataload       // [num2]
      0x04 calldataload       // [num2, num1]
      SAFE_DIV(0x00) 
      0x00 mstore
      0x20 0x00 return


    mulDivJump:
      0x44 calldataload
      0x24 calldataload
      0x04 calldataload
      
      MUL_DIV(0x00) 0x00 mstore
      0x20 0x00 return
/*
    sqrtJump:
      0x04 calldataload
      SQRT() 0x00 mstore
      0x20 0x00 return
*/
}

