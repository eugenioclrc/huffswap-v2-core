extern _REQUIRE(z0, err) stack(1, 0) reads(CONTROL_FLOW)
extern _UPDATE_CUMULATIVE_IFNEED(z0) stack(3, 0) reads(CONTROL_FLOW)

const KLAST_SLOT
const TOTAL_SUPPLY_SLOT
const FACTORY
const PACKED_RESERVE_SLOT
const RESERVE1_OFFSET
const BLOCK_TIMESTAMP_LAST_OFFSET
const _SYNC_EVENT_SIGNATURE

const P0CUMULATIVE_SLOT
const P1CUMULATIVE_SLOT

fn _UPDATE<z0>(balance0, balance1, reserve0, reserve1, blockTimestampLast) -> () {  
  // if (balance0 > type(uint112).max || balance1 > type(uint112).max) revert Overflow();
  // bytes4(keccak256("Overflow()")) == 0x35278d12
  notOverflowBalance0 = iszero(gt(balance0, 0xffffffffffffffffffffffffffff))
  notOverflowBalance1 = iszero(gt(balance1, 0xffffffffffffffffffffffffffff))
  _REQUIRE<z0, 0x35278d12>(notOverflowBalance0)
  _REQUIRE<z0, 0x35278d12>(notOverflowBalance1)

  _EMIT_SYNC<z0>(balance0, balance1)
  _UPDATE_PACKED_RESERVE<z0>(balance0, balance1)
        
  timeElapsed = and(sub(timestamp(), blockTimestampLast), 0xffffffff)
  
  _UPDATE_CUMULATIVE_IFNEED<z0>(timeElapsed, reserve0, reserve1)
  
}

fn _UPDATE_PACKED_RESERVE<z0>(balance0, balance1) -> () reads(CONTROL_FLOW) writes(STORAGE) {
  packedData = or(
      balance0,
      or(
        shl(RESERVE1_OFFSET, balance1),
        shl(BLOCK_TIMESTAMP_LAST_OFFSET, timestamp())
      )
    )
  sstore(
    PACKED_RESERVE_SLOT,
    packedData
  )
}

fn _EMIT_SYNC<z0>(balance0, balance1) -> () {
  mstore(z0, balance0)
  mstore(0x20, balance1)
  // bytes4(keccak256("Sync(uint256,uint256)")) == 0x8b5b9b4f
  log1(z0, 0x40, _SYNC_EVENT_SIGNATURE)  
}



fn _UPDATE_CUMULATIVE<z0>(timeElapsed, reserve0, reserve1) -> (timeElapsed, reserve0, reserve1) {
  p0cumulative = sload(P0CUMULATIVE_SLOT)
  p1cumulative = sload(P1CUMULATIVE_SLOT)

  p0 = mul(UQ_DIV(ENCODE_UQ112(reserve1), reserve0), timeElapsed)
  p1 = mul(UQ_DIV(ENCODE_UQ112(reserve0), reserve1), timeElapsed)


  sstore(P0CUMULATIVE_SLOT, add(p0, p0cumulative))
  sstore(P1CUMULATIVE_SLOT, add(p1, p1cumulative))
}

fn ENCODE_UQ112(r) -> (encoded) {
  maskUint224 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff
  encoded = and(mul(r, 0x10000000000000000000000000000), maskUint224)
}

fn UQ_DIV(x, y) -> (z) {
  maskUint224 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff
  z = and(div(x, y), maskUint224)
}

fn TEST_UQ(x, y, z) -> (result) {
  result = mul(UQ_DIV(ENCODE_UQ112(x), y), z)
}