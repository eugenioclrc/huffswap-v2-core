extern REQUIRE(z0, err) stack(1, 0) writes(CONTROL_FLOW)
extern _GET_RESERVE0() stack(1, 1) reads(CONTROL_FLOW, STORAGE)
extern _GET_RESERVE1() stack(1, 1) reads(CONTROL_FLOW, STORAGE)
extern _GET_BLOCK_TIMESTAMP_LAST() stack(1, 1) writes(CONTROL_FLOW)
extern UNLOCK() stack(0, 0) reads(CONTROL_FLOW) writes(STORAGE)
extern LOCK(z0) stack(0, 0) writes(CONTROL_FLOW, STORAGE)
extern _UPDATE(z0) stack(5, 0) writes(CONTROL_FLOW, STORAGE)
extern ERC20_TRANSFER(z0) stack(3, 0) writes(CONTROL_FLOW, MEMORY)
extern _TRANSFER_IF_NOT_ZERO(z0) stack(3, 0) reads(CONTROL_FLOW) writes(MEMORY)
extern _UNISWAP_V2_CALL_IF_DATA(z0) stack(3, 0) reads(CONTROL_FLOW) writes(MEMORY)
extern TERNARY() stack(3, 1) writes(CONTROL_FLOW)
extern TOKEN0(z0) stack(0, 1) reads(CONTROL_FLOW)
extern TOKEN1(z0) stack(0, 1) reads(CONTROL_FLOW)
extern SELF_BALANCE_TOKEN0(z0) stack(0, 1) reads(CONTROL_FLOW)
extern SELF_BALANCE_TOKEN1(z0) stack(0, 1) reads(CONTROL_FLOW)

const _MINT_EVENT_SIGNATURE
const _SWAP_EVENT_SIGNATURE

const KLAST_SLOT
const TOTAL_SUPPLY_SLOT
const PACKED_RESERVE_SLOT
const ADDRESS_MASK
const SIG_uniswapV2Call
const MINIMUM_LIQUIDITY

fn _SWAP_CHECK_INPUTS<z0>(amount0Out, amount1Out, to) -> () reads(CONTROL_FLOW) {
  // InsufficientOutputAmount() = 0x42301c23
  REQUIRE<z0, 0x42301c23>(or(amount0Out, amount1Out)) // if both are zero it will revert
  
  // InvalidTo() = 0x290fa188
  REQUIRE<z0, 0x290fa188>(iszero(eq(to, TOKEN0<z0>())))
  REQUIRE<z0, 0x290fa188>(iszero(eq(to, TOKEN1<z0>())))
}

fn SWAP<z0>() -> () {
  LOCK<z0>()
  amount0Out = calldataload(0x04)
  amount1Out = calldataload(0x24)
  to = and(calldataload(0x44), ADDRESS_MASK)
  _SWAP_CHECK_INPUTS<z0>(amount0Out, amount1Out, to)
  
  packedReserveSlot = sload(PACKED_RESERVE_SLOT)
  reserve0 = _GET_RESERVE0(packedReserveSlot)
  reserve1 = _GET_RESERVE1(packedReserveSlot)
  blockTimestampLast = _GET_BLOCK_TIMESTAMP_LAST(packedReserveSlot)

  // InsufficientLiquidity() = 0xbb55fd27
  REQUIRE<z0, 0xbb55fd27>(or(lt(amount0Out, reserve0), lt(amount1Out, reserve1)))
  
  _TRANSFER_SWAP_HOOK<z0>(to, amount0Out, amount1Out)

  balance0 = SELF_BALANCE_TOKEN0<z0>()
  balance1 = SELF_BALANCE_TOKEN1<z0>()
  
  // @notice if balances > type(uint112).max it will revert
  _UPDATE<z0>(balance0, balance1, reserve0, reserve1, blockTimestampLast)
  
  KCHECK<z0>(balance0, balance1, reserve0, reserve1)

  UNLOCK()
  stop()
}

fn _CALC_AMOUNT0in(reserve0, balance0) -> (amount0In) {
  amount0In = sub(reserve0, balance0)
  amount0In = TERNARY(amount0In, gt(amount0In, 0), 0)
}

fn _CALC_AMOUNT1in(reserve1, balance1) -> (amount1In) {
  amount1In = sub(reserve1, balance1)
  amount1In = TERNARY(amount1In, gt(amount1In, 0), 0)
}

fn KCHECK<z0>(balance0, balance1, reserve0, reserve1) -> () reads(CONTROL_FLOW) writes(STORAGE) {
  amount0In = _CALC_AMOUNT0in(reserve0, balance0)
  amount1In = _CALC_AMOUNT1in(reserve1, balance1)
  
  balance0Adjusted = sub(mul(balance0, MINIMUM_LIQUIDITY), mul(amount0In, 3))
  balance1Adjusted = sub(mul(balance1, MINIMUM_LIQUIDITY), mul(amount1In, 3))

  // cant overflow due previous checks
  k = mul(mul(reserve0, reserve1), 1000000)
  newK = mul(balance0Adjusted, balance1Adjusted)
  // WrongK() = 0x35b01a0f
  REQUIRE<z0, 0x35b01a0f>(gt(newK, k))

  _EMIT_SWAP_EVENT<z0>(amount0In, amount1In)
}


fn _EMIT_SWAP_EVENT<z0>(amount0In, amount1In) -> () writes(MEMORY, CONTROL_FLOW) {
  mstore(z0, amount0In)
  mstore(0x20, amount1In)
  mstore(0x40, calldataload(0x04)) // amount0Out
  mstore(0x60, calldataload(0x24)) // amount1Out
  log3(z0, 0x80, _SWAP_EVENT_SIGNATURE, caller(), calldataload(0x44))
}


fn _TRANSFER_SWAP_HOOK<z0>(to, amount0Out, amount1Out) -> () writes(MEMORY, CONTROL_FLOW) {
  _TRANSFER_IF_NOT_ZERO<z0>(TOKEN0<z0>(), to, amount0Out)
  _TRANSFER_IF_NOT_ZERO<z0>(TOKEN1<z0>(), to, amount1Out)

  _UNISWAP_V2_CALL_IF_DATA<z0>(to, amount0Out, amount1Out)
}

fn _UNISWAP_V2_CALL<z0>(to, amount0Out, amount1Out) -> () reads(CONTROL_FLOW) {
  _STORE_IN_MEMORY_FOR_UNICALL<z0>(amount0Out, amount1Out)

  callOk = call(gas(), to, z0, z0, calldatasize(), z0, z0)
  // HookCallFail()
  REQUIRE<z0, 0x7fd1918d>(callOk)
}

fn _STORE_IN_MEMORY_FOR_UNICALL<z0>(amount0Out, amount1Out) -> () reads(CONTROL_FLOW) writes(MEMORY) {
  calldatacopy(0x84, 0x84, sub(calldatasize(), 0x84))
  shiftedFunctionSig = shl(0xe0, SIG_uniswapV2Call)  
  mstore(z0, shiftedFunctionSig)
  mstore(0x04, caller())
  mstore(0x24, amount0Out)
  mstore(0x44, amount1Out)
  mstore(0x64, 0x80)
}