#define macro _TRANSFER_IF_NOT_ZERO(z0) = takes(3) returns(0) {
    // takes:                      [amount, to, TOKEN]
    dup3 iszero skipTransferJump jumpi
    
    dup3                        // [amount, to, TOKEN, amount]
    dup3                        // [amount, to, TOKEN, amount, to]
    dup3                        // [amount, to, TOKEN, amount, to, TOKEN]
    
    ERC20_TRANSFER(<z0>)        // [amount, to, TOKEN]

    skipTransferJump:
    // stack:                      [amount, to, TOKEN]
    pop                         // [amount, to]
    pop                         // [amount]
    pop                         // []
    
    // returns:                    []
}

#define macro _UNISWAP_V2_CALL_IF_DATA(z0) = takes(3) returns(0) {  
  // takes:                      [to, amount0Out, amount1Out]
  0x84 calldataload          // length of data
  iszero                     // data.length == 0
  skipHook jumpi             // if data.length == 0, jump to skipCallJump
  dup3                       // [to, amount0Out, amount1Out, to]
  dup3                       // [to, amount0Out, amount1Out, to, amount0Out]
  dup3                       // [to, amount0Out, amount1Out, to, amount0Out, amount1Out]
  _UNISWAP_V2_CALL(<z0>)       // [to, amount0Out, amount1Out]

  skipHook:
  pop
  pop
  pop
}


// balls-insert-start
#define macro KCHECK(z0) = takes(6) returns(0) {
    // takes:                      [amount1In, amount0In, reserve1, reserve0, balance1, balance0]
    [MINIMUM_LIQUIDITY]         // [amount1In, amount0In, reserve1, reserve0, balance1, balance0, MINIMUM_LIQUIDITY]
    mul                         // [amount1In, amount0In, reserve1, reserve0, balance1, mul(MINIMUM_LIQUIDITY, balance0)]
    [MINIMUM_LIQUIDITY]         // [amount1In, amount0In, reserve1, reserve0, balance1, mul(MINIMUM_LIQUIDITY, balance0), MINIMUM_LIQUIDITY]
    0x3                         // [amount1In, amount0In, reserve1, reserve0, balance1, mul(MINIMUM_LIQUIDITY, balance0), MINIMUM_LIQUIDITY, 0x3]
    dup7                        // [amount1In, amount0In, reserve1, reserve0, balance1, mul(MINIMUM_LIQUIDITY, balance0), MINIMUM_LIQUIDITY, 0x3, amount0In]
    mul                         // [amount1In, amount0In, reserve1, reserve0, balance1, mul(MINIMUM_LIQUIDITY, balance0), MINIMUM_LIQUIDITY, mul(amount0In, 0x3)]
    dup8                        // [amount1In, amount0In, reserve1, reserve0, balance1, mul(MINIMUM_LIQUIDITY, balance0), MINIMUM_LIQUIDITY, mul(amount0In, 0x3), amount1In]
    0x3                         // [amount1In, amount0In, reserve1, reserve0, balance1, mul(MINIMUM_LIQUIDITY, balance0), MINIMUM_LIQUIDITY, mul(amount0In, 0x3), amount1In, 0x3]
    mul                         // [amount1In, amount0In, reserve1, reserve0, balance1, mul(MINIMUM_LIQUIDITY, balance0), MINIMUM_LIQUIDITY, mul(amount0In, 0x3), mul(0x3, amount1In)]
    swap3                       // [amount1In, amount0In, reserve1, reserve0, balance1, mul(0x3, amount1In), MINIMUM_LIQUIDITY, mul(amount0In, 0x3), mul(MINIMUM_LIQUIDITY, balance0)]
    sub                         // [amount1In, amount0In, reserve1, reserve0, balance1, mul(0x3, amount1In), MINIMUM_LIQUIDITY, balance0Adjusted]
    swap3                       // [amount1In, amount0In, reserve1, reserve0, balance0Adjusted, mul(0x3, amount1In), MINIMUM_LIQUIDITY, balance1]
    mul                         // [amount1In, amount0In, reserve1, reserve0, balance0Adjusted, mul(0x3, amount1In), mul(balance1, MINIMUM_LIQUIDITY)]
    sub                         // [amount1In, amount0In, reserve1, reserve0, balance0Adjusted, balance1Adjusted]
    mul                         // [amount1In, amount0In, reserve1, reserve0, newK]
    swap2                       // [amount1In, amount0In, newK, reserve0, reserve1]
    mul                         // [amount1In, amount0In, newK, mul(reserve1, reserve0)]
    0xf4240                     // [amount1In, amount0In, newK, mul(reserve1, reserve0), 0xf4240]
    mul                         // [amount1In, amount0In, newK, k]
    lt                          // [amount1In, amount0In, lt(k, newK)]
    REQUIRE(<z0>, 0x35b01a0f)   // [amount1In, amount0In]
    _EMIT_SWAP_EVENT(<z0>)      // []
    // returns:                    []
}

#define macro SWAP(z0) = takes(0) returns(0) {
    // takes:                      []
    0x4                         // [0x4]
    calldataload                // [amount0Out]
    0x24                        // [amount0Out, 0x24]
    calldataload                // [amount0Out, amount1Out]
    [PACKED_RESERVE_SLOT]       // [amount0Out, amount1Out, PACKED_RESERVE_SLOT]
    LOCK(<z0>)                  // [amount0Out, amount1Out, PACKED_RESERVE_SLOT]
    sload                       // [amount0Out, amount1Out, packedReserveSlot]
    dup1                        // [amount0Out, amount1Out, packedReserveSlot, packedReserveSlot]
    _GET_RESERVE0()             // [amount0Out, amount1Out, packedReserveSlot, reserve0]
    dup3                        // [amount0Out, amount1Out, packedReserveSlot, reserve0, amount1Out]
    dup4                        // [amount0Out, amount1Out, packedReserveSlot, reserve0, amount1Out, amount1Out]
    dup6                        // [amount0Out, amount1Out, packedReserveSlot, reserve0, amount1Out, amount1Out, amount0Out]
    [ADDRESS_MASK]              // [amount0Out, amount1Out, packedReserveSlot, reserve0, amount1Out, amount1Out, amount0Out, ADDRESS_MASK]
    0x44                        // [amount0Out, amount1Out, packedReserveSlot, reserve0, amount1Out, amount1Out, amount0Out, ADDRESS_MASK, 0x44]
    calldataload                // [amount0Out, amount1Out, packedReserveSlot, reserve0, amount1Out, amount1Out, amount0Out, ADDRESS_MASK, calldataload(0x44)]
    and                         // [amount0Out, amount1Out, packedReserveSlot, reserve0, amount1Out, amount1Out, amount0Out, to]
    dup1                        // [amount0Out, amount1Out, packedReserveSlot, reserve0, amount1Out, amount1Out, amount0Out, to, to]
    dup8                        // [amount0Out, amount1Out, packedReserveSlot, reserve0, amount1Out, amount1Out, amount0Out, to, to, amount1Out]
    dup10                       // [amount0Out, amount1Out, packedReserveSlot, reserve0, amount1Out, amount1Out, amount0Out, to, to, amount1Out, amount0Out]
    _SWAP_CHECK_INPUTS(<z0>)    // [amount0Out, amount1Out, packedReserveSlot, reserve0, amount1Out, amount1Out, amount0Out, to]
    dup6                        // [amount0Out, amount1Out, packedReserveSlot, reserve0, amount1Out, amount1Out, amount0Out, to, packedReserveSlot]
    _GET_RESERVE1()             // [amount0Out, amount1Out, packedReserveSlot, reserve0, amount1Out, amount1Out, amount0Out, to, reserve1]
    swap6                       // [amount0Out, amount1Out, reserve1, reserve0, amount1Out, amount1Out, amount0Out, to, packedReserveSlot]
    _GET_BLOCK_TIMESTAMP_LAST()
    //                             [amount0Out, amount1Out, reserve1, reserve0, amount1Out, amount1Out, amount0Out, to, blockTimestampLast]
    swap7                       // [amount0Out, blockTimestampLast, reserve1, reserve0, amount1Out, amount1Out, amount0Out, to, amount1Out]
    dup7                        // [amount0Out, blockTimestampLast, reserve1, reserve0, amount1Out, amount1Out, amount0Out, to, amount1Out, reserve1]
    gt                          // [amount0Out, blockTimestampLast, reserve1, reserve0, amount1Out, amount1Out, amount0Out, to, gt(reserve1, amount1Out)]
    dup6                        // [amount0Out, blockTimestampLast, reserve1, reserve0, amount1Out, amount1Out, amount0Out, to, gt(reserve1, amount1Out), reserve0]
    dup10                       // [amount0Out, blockTimestampLast, reserve1, reserve0, amount1Out, amount1Out, amount0Out, to, gt(reserve1, amount1Out), reserve0, amount0Out]
    lt                          // [amount0Out, blockTimestampLast, reserve1, reserve0, amount1Out, amount1Out, amount0Out, to, gt(reserve1, amount1Out), lt(amount0Out, reserve0)]
    and                         // [amount0Out, blockTimestampLast, reserve1, reserve0, amount1Out, amount1Out, amount0Out, to, and(lt(amount0Out, reserve0), gt(reserve1, amount1Out))]
    REQUIRE(<z0>, 0xbb55fd27)   // [amount0Out, blockTimestampLast, reserve1, reserve0, amount1Out, amount1Out, amount0Out, to]
    _TRANSFER_SWAP_HOOK(<z0>)   // [amount0Out, blockTimestampLast, reserve1, reserve0, amount1Out]
    SELF_BALANCE_TOKEN0(<z0>)   // [amount0Out, blockTimestampLast, reserve1, reserve0, amount1Out, balance0]
    SELF_BALANCE_TOKEN1(<z0>)   // [amount0Out, blockTimestampLast, reserve1, reserve0, amount1Out, balance0, balance1]
    swap2                       // [amount0Out, blockTimestampLast, reserve1, reserve0, balance1, balance0, amount1Out]
    dup3                        // [amount0Out, blockTimestampLast, reserve1, reserve0, balance1, balance0, amount1Out, balance1]
    dup6                        // [amount0Out, blockTimestampLast, reserve1, reserve0, balance1, balance0, amount1Out, balance1, reserve1]
    _CALC_AMOUNT_IN(<z0>)       // [amount0Out, blockTimestampLast, reserve1, reserve0, balance1, balance0, amount1In]
    swap6                       // [amount1In, blockTimestampLast, reserve1, reserve0, balance1, balance0, amount0Out]
    dup2                        // [amount1In, blockTimestampLast, reserve1, reserve0, balance1, balance0, amount0Out, balance0]
    dup5                        // [amount1In, blockTimestampLast, reserve1, reserve0, balance1, balance0, amount0Out, balance0, reserve0]
    _CALC_AMOUNT_IN(<z0>)       // [amount1In, blockTimestampLast, reserve1, reserve0, balance1, balance0, amount0In]
    swap5                       // [amount1In, amount0In, reserve1, reserve0, balance1, balance0, blockTimestampLast]
    dup5                        // [amount1In, amount0In, reserve1, reserve0, balance1, balance0, blockTimestampLast, reserve1]
    dup5                        // [amount1In, amount0In, reserve1, reserve0, balance1, balance0, blockTimestampLast, reserve1, reserve0]
    dup5                        // [amount1In, amount0In, reserve1, reserve0, balance1, balance0, blockTimestampLast, reserve1, reserve0, balance1]
    dup5                        // [amount1In, amount0In, reserve1, reserve0, balance1, balance0, blockTimestampLast, reserve1, reserve0, balance1, balance0]
    _UPDATE(<z0>)               // [amount1In, amount0In, reserve1, reserve0, balance1, balance0]
    dup6                        // [amount1In, amount0In, reserve1, reserve0, balance1, balance0, amount1In]
    dup6                        // [amount1In, amount0In, reserve1, reserve0, balance1, balance0, amount1In, amount0In]
    or                          // [amount1In, amount0In, reserve1, reserve0, balance1, balance0, or(amount0In, amount1In)]
    REQUIRE(<z0>, 0x98fb561)    // [amount1In, amount0In, reserve1, reserve0, balance1, balance0]
    KCHECK(<z0>)                // []
    UNLOCK()                    // []
    stop                        // []
    // returns:                    []
}

#define macro _CALC_AMOUNT_IN(z0) = takes(3) returns(1) {
    // takes:                      [amountOut, balance, reserve]
    swap2                       // [reserve, balance, amountOut]
    0x0                         // [reserve, balance, amountOut, 0x0]
    swap3                       // [0x0, balance, amountOut, reserve]
    sub                         // [0x0, balance, x]
    dup1                        // [0x0, balance, x, x]
    dup3                        // [0x0, balance, x, x, balance]
    lt                          // [0x0, balance, x, lt(balance, x)]
    swap2                       // [0x0, lt(balance, x), x, balance]
    sub                         // [0x0, lt(balance, x), sub(balance, x)]
    TERNARY()                   // [amountIn]
    // returns:                    [amountIn]
}

#define macro _EMIT_SWAP_EVENT(z0) = takes(2) returns(0) {
    // takes:                      [amount1In, amount0In]
    <z0>                        // [amount1In, amount0In, z0]
    mstore                      // [amount1In]
    0x20                        // [amount1In, 0x20]
    mstore                      // []
    0x44                        // [0x44]
    0x4                         // [0x44, 0x4]
    calldataload                // [0x44, calldataload(0x4)]
    0x40                        // [0x44, calldataload(0x4), 0x40]
    mstore                      // [0x44]
    calldataload                // [calldataload(0x44)]
    caller                      // [calldataload(0x44), caller()]
    [_SWAP_EVENT_SIGNATURE]     // [calldataload(0x44), caller(), _SWAP_EVENT_SIGNATURE]
    0x80                        // [calldataload(0x44), caller(), _SWAP_EVENT_SIGNATURE, 0x80]
    0x24                        // [calldataload(0x44), caller(), _SWAP_EVENT_SIGNATURE, 0x80, 0x24]
    calldataload                // [calldataload(0x44), caller(), _SWAP_EVENT_SIGNATURE, 0x80, calldataload(0x24)]
    0x60                        // [calldataload(0x44), caller(), _SWAP_EVENT_SIGNATURE, 0x80, calldataload(0x24), 0x60]
    mstore                      // [calldataload(0x44), caller(), _SWAP_EVENT_SIGNATURE, 0x80]
    <z0>                        // [calldataload(0x44), caller(), _SWAP_EVENT_SIGNATURE, 0x80, z0]
    log3                        // []
    // returns:                    []
}

#define macro _STORE_IN_MEMORY_FOR_UNICALL(z0) = takes(2) returns(0) {
    // takes:                      [amount1Out, amount0Out]
    0x24                        // [amount1Out, amount0Out, 0x24]
    caller                      // [amount1Out, amount0Out, 0x24, caller()]
    0x4                         // [amount1Out, amount0Out, 0x24, caller(), 0x4]
    0x84                        // [amount1Out, amount0Out, 0x24, caller(), 0x4, 0x84]
    calldatasize                // [amount1Out, amount0Out, 0x24, caller(), 0x4, 0x84, calldatasize()]
    sub                         // [amount1Out, amount0Out, 0x24, caller(), 0x4, sub(calldatasize(), 0x84)]
    0x84                        // [amount1Out, amount0Out, 0x24, caller(), 0x4, sub(calldatasize(), 0x84), 0x84]
    0x84                        // [amount1Out, amount0Out, 0x24, caller(), 0x4, sub(calldatasize(), 0x84), 0x84, 0x84]
    calldatacopy                // [amount1Out, amount0Out, 0x24, caller(), 0x4]
    [SIG_uniswapV2Call]         // [amount1Out, amount0Out, 0x24, caller(), 0x4, SIG_uniswapV2Call]
    0xe0                        // [amount1Out, amount0Out, 0x24, caller(), 0x4, SIG_uniswapV2Call, 0xe0]
    shl                         // [amount1Out, amount0Out, 0x24, caller(), 0x4, shiftedFunctionSig]
    <z0>                        // [amount1Out, amount0Out, 0x24, caller(), 0x4, shiftedFunctionSig, z0]
    mstore                      // [amount1Out, amount0Out, 0x24, caller(), 0x4]
    mstore                      // [amount1Out, amount0Out, 0x24]
    mstore                      // [amount1Out]
    0x44                        // [amount1Out, 0x44]
    mstore                      // []
    0x80                        // [0x80]
    0x64                        // [0x80, 0x64]
    mstore                      // []
    // returns:                    []
}

#define macro _SWAP_CHECK_INPUTS(z0) = takes(3) returns(0) {
    // takes:                      [to, amount1Out, amount0Out]
    or                          // [to, or(amount0Out, amount1Out)]
    REQUIRE(<z0>, 0x42301c23)   // [to]
    dup1                        // [to, to]
    TOKEN0(<z0>)                // [to, to, TOKEN0<z0>()]
    eq                          // [to, eq(TOKEN0<z0>(), to)]
    iszero                      // [to, iszero(eq(TOKEN0<z0>(), to))]
    REQUIRE(<z0>, 0x290fa188)   // [to]
    TOKEN1(<z0>)                // [to, TOKEN1<z0>()]
    eq                          // [eq(TOKEN1<z0>(), to)]
    iszero                      // [iszero(eq(TOKEN1<z0>(), to))]
    REQUIRE(<z0>, 0x290fa188)   // []
    // returns:                    []
}

#define macro _TRANSFER_SWAP_HOOK(z0) = takes(3) returns(0) {
    // takes:                      [amount1Out, amount0Out, to]
    dup3                        // [amount1Out, amount0Out, to, amount1Out]
    dup3                        // [amount1Out, amount0Out, to, amount1Out, amount0Out]
    dup3                        // [amount1Out, amount0Out, to, amount1Out, amount0Out, to]
    TOKEN0(<z0>)                // [amount1Out, amount0Out, to, amount1Out, amount0Out, to, TOKEN0<z0>()]
    _TRANSFER_IF_NOT_ZERO(<z0>)
    //                             [amount1Out, amount0Out, to, amount1Out]
    dup2                        // [amount1Out, amount0Out, to, amount1Out, to]
    TOKEN1(<z0>)                // [amount1Out, amount0Out, to, amount1Out, to, TOKEN1<z0>()]
    _TRANSFER_IF_NOT_ZERO(<z0>)
    //                             [amount1Out, amount0Out, to]
    _UNISWAP_V2_CALL_IF_DATA(<z0>)
    //                             []
    // returns:                    []
}

#define macro _UNISWAP_V2_CALL(z0) = takes(3) returns(0) {
    // takes:                      [amount1Out, amount0Out, to]
    swap2                       // [to, amount0Out, amount1Out]
    <z0>                        // [to, amount0Out, amount1Out, z0]
    swap2                       // [to, z0, amount1Out, amount0Out]
    _STORE_IN_MEMORY_FOR_UNICALL(<z0>)
    //                             [to, z0]
    calldatasize                // [to, z0, calldatasize()]
    <z0>                        // [to, z0, calldatasize(), z0]
    <z0>                        // [to, z0, calldatasize(), z0, z0]
    <z0>                        // [to, z0, calldatasize(), z0, z0, z0]
    swap5                       // [z0, z0, calldatasize(), z0, z0, to]
    gas                         // [z0, z0, calldatasize(), z0, z0, to, gas()]
    call                        // [callOk]
    REQUIRE(<z0>, 0x7fd1918d)   // []
    // returns:                    []
}
// balls-insert-end