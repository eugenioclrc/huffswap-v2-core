// extern (z0) stack(3, 0) reads(CONTROL_FLOW)
#define macro _UPDATE_CUMULATIVE_IFNEED(z0) = takes(3) returns(0) {
    // takes:                      [reserve1, reserve0, timeElapsed]
    dup3                    // [reserve1, reserve0, timeElapsed, reserve1]  
    dup3                    // [reserve1, reserve0, timeElapsed, reserve1, reserve0]
    dup3                    // [reserve1, reserve0, timeElapsed, reserve1, reserve0, timeElapsed]
    or                      // [reserve1, reserve0, timeElapsed, reserve1, reserve0 | timeElapsed]
    or                      // [reserve1, reserve0, timeElapsed, reserve1 | reserve0 | timeElapsed]
    iszero                  // [reserve1, reserve0, timeElapsed, (reserve1 | reserve0 | timeElapsed) == 0]
    skipCumulativeUpdate jumpi
    // takes:                      [reserve1, reserve0, timeElapsed]
    _UPDATE_CUMULATIVE(<z0>)
    // returns:                    [amount, allowanceAmount, allowanceSlot]
    skipCumulativeUpdate:
    pop pop pop
    // returns:                    []    
}


// balls-insert-start
#define macro ENCODE_UQ112() = takes(1) returns(1) {
    // takes:                      [r]
    0x10000000000000000000000000000
    //                             [r, 0x10000000000000000000000000000]
    mul                         // [mul(0x10000000000000000000000000000, r)]
    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    //                             [mul(0x10000000000000000000000000000, r), maskUint224]
    and                         // [encoded]
    // returns:                    [encoded]
}

#define macro UQ_DIV() = takes(2) returns(1) {
    // takes:                      [y, x]
    div                         // [div(x, y)]
    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    //                             [div(x, y), maskUint224]
    and                         // [z]
    // returns:                    [z]
}

#define macro _EMIT_SYNC(z0) = takes(2) returns(0) {
    // takes:                      [balance1, balance0]
    <z0>                        // [balance1, balance0, z0]
    mstore                      // [balance1]
    0x20                        // [balance1, 0x20]
    mstore                      // []
    [_SYNC_EVENT_SIGNATURE]     // [_SYNC_EVENT_SIGNATURE]
    0x40                        // [_SYNC_EVENT_SIGNATURE, 0x40]
    <z0>                        // [_SYNC_EVENT_SIGNATURE, 0x40, z0]
    log1                        // []
    // returns:                    []
}

#define macro _UPDATE(z0) = takes(5) returns(0) {
    // takes:                      [blockTimestampLast, reserve1, reserve0, balance1, balance0]
    swap3                       // [blockTimestampLast, balance0, reserve0, balance1, reserve1]
    swap2                       // [blockTimestampLast, balance0, reserve1, balance1, reserve0]
    swap1                       // [blockTimestampLast, balance0, reserve1, reserve0, balance1]
    swap4                       // [balance1, balance0, reserve1, reserve0, blockTimestampLast]
    0xffffffffffffffffffffffffffff
    //                             [balance1, balance0, reserve1, reserve0, blockTimestampLast, 0xffffffffffffffffffffffffffff]
    dup6                        // [balance1, balance0, reserve1, reserve0, blockTimestampLast, 0xffffffffffffffffffffffffffff, balance1]
    gt                          // [balance1, balance0, reserve1, reserve0, blockTimestampLast, gt(balance1, 0xffffffffffffffffffffffffffff)]
    0xffffffffffffffffffffffffffff
    //                             [balance1, balance0, reserve1, reserve0, blockTimestampLast, gt(balance1, 0xffffffffffffffffffffffffffff), 0xffffffffffffffffffffffffffff]
    dup6                        // [balance1, balance0, reserve1, reserve0, blockTimestampLast, gt(balance1, 0xffffffffffffffffffffffffffff), 0xffffffffffffffffffffffffffff, balance0]
    gt                          // [balance1, balance0, reserve1, reserve0, blockTimestampLast, gt(balance1, 0xffffffffffffffffffffffffffff), gt(balance0, 0xffffffffffffffffffffffffffff)]
    iszero                      // [balance1, balance0, reserve1, reserve0, blockTimestampLast, gt(balance1, 0xffffffffffffffffffffffffffff), notOverflowBalance0]
    _REQUIRE(<z0>, 0x35278d12)  // [balance1, balance0, reserve1, reserve0, blockTimestampLast, gt(balance1, 0xffffffffffffffffffffffffffff)]
    iszero                      // [balance1, balance0, reserve1, reserve0, blockTimestampLast, notOverflowBalance1]
    _REQUIRE(<z0>, 0x35278d12)  // [balance1, balance0, reserve1, reserve0, blockTimestampLast]
    timestamp                   // [balance1, balance0, reserve1, reserve0, blockTimestampLast, timestamp()]
    sub                         // [balance1, balance0, reserve1, reserve0, sub(timestamp(), blockTimestampLast)]
    0xffffffff                  // [balance1, balance0, reserve1, reserve0, sub(timestamp(), blockTimestampLast), 0xffffffff]
    and                         // [balance1, balance0, reserve1, reserve0, timeElapsed]
    _UPDATE_CUMULATIVE_IFNEED(<z0>)
    //                             [balance1, balance0]
    dup2                        // [balance1, balance0, balance1]
    dup2                        // [balance1, balance0, balance1, balance0]
    _UPDATE_PACKED_RESERVE(<z0>)
    //                             [balance1, balance0]
    _EMIT_SYNC(<z0>)            // []
    // returns:                    []
}

#define macro _UPDATE_CUMULATIVE(z0) = takes(3) returns(3) {
    // takes:                      [reserve1, reserve0, timeElapsed]
    [P1CUMULATIVE_SLOT]         // [reserve1, reserve0, timeElapsed, P1CUMULATIVE_SLOT]
    sload                       // [reserve1, reserve0, timeElapsed, p1cumulative]
    dup2                        // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed]
    dup3                        // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, timeElapsed]
    dup5                        // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, timeElapsed, reserve0]
    dup7                        // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, timeElapsed, reserve0, reserve1]
    ENCODE_UQ112()              // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, timeElapsed, reserve0, ENCODE_UQ112<>(reserve1)]
    UQ_DIV()                    // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, timeElapsed, UQ_DIV<>(ENCODE_UQ112<>(reserve1), reserve0)]
    mul                         // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, p0]
    [P0CUMULATIVE_SLOT]         // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, p0, P0CUMULATIVE_SLOT]
    sload                       // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, p0, p0cumulative]
    add                         // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, add(p0cumulative, p0)]
    [P0CUMULATIVE_SLOT]         // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, add(p0cumulative, p0), P0CUMULATIVE_SLOT]
    sstore                      // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed]
    dup5                        // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, reserve1]
    dup5                        // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, reserve1, reserve0]
    ENCODE_UQ112()              // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, reserve1, ENCODE_UQ112<>(reserve0)]
    UQ_DIV()                    // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, UQ_DIV<>(ENCODE_UQ112<>(reserve0), reserve1)]
    mul                         // [reserve1, reserve0, timeElapsed, p1cumulative, p1]
    add                         // [reserve1, reserve0, timeElapsed, add(p1, p1cumulative)]
    [P1CUMULATIVE_SLOT]         // [reserve1, reserve0, timeElapsed, add(p1, p1cumulative), P1CUMULATIVE_SLOT]
    sstore                      // [reserve1, reserve0, timeElapsed]
    // returns:                    [reserve1, reserve0, timeElapsed]
}

#define macro _UPDATE_PACKED_RESERVE(z0) = takes(2) returns(0) {
    // takes:                      [balance1, balance0]
    swap1                       // [balance0, balance1]
    [RESERVE1_OFFSET]           // [balance0, balance1, RESERVE1_OFFSET]
    shl                         // [balance0, shl(RESERVE1_OFFSET, balance1)]
    timestamp                   // [balance0, shl(RESERVE1_OFFSET, balance1), timestamp()]
    [BLOCK_TIMESTAMP_LAST_OFFSET]
    //                             [balance0, shl(RESERVE1_OFFSET, balance1), timestamp(), BLOCK_TIMESTAMP_LAST_OFFSET]
    shl                         // [balance0, shl(RESERVE1_OFFSET, balance1), shl(BLOCK_TIMESTAMP_LAST_OFFSET, timestamp())]
    or                          // [balance0, or(shl(BLOCK_TIMESTAMP_LAST_OFFSET, timestamp()), shl(RESERVE1_OFFSET, balance1))]
    or                          // [packedData]
    [PACKED_RESERVE_SLOT]       // [packedData, PACKED_RESERVE_SLOT]
    sstore                      // []
    // returns:                    []
}
// balls-insert-end
