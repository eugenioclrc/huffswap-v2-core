extern REQUIRE(z0, err) stack(1, 0) writes(CONTROL_FLOW)
extern LOCK(z0) stack(0, 0) reads(CONTROL_FLOW) writes(STORAGE)
extern UNLOCK() stack(0, 0) reads(CONTROL_FLOW) writes(STORAGE)
extern SAFE_TRANSFER() stack(3, 0) writes(CONTROL_FLOW)
extern _UPDATE(z0) stack(5, 0) writes(CONTROL_FLOW, STORAGE)
extern TOKEN0(z0) stack(0, 1) reads(CONTROL_FLOW)
extern TOKEN1(z0) stack(0, 1) reads(CONTROL_FLOW)
extern SELF_BALANCE_TOKEN0(z0) stack(0, 1) reads(CONTROL_FLOW)
extern SELF_BALANCE_TOKEN1(z0) stack(0, 1) reads(CONTROL_FLOW)

extern _GET_RESERVE0() stack(1, 1) writes(CONTROL_FLOW)
extern _GET_RESERVE1() stack(1, 1) writes(CONTROL_FLOW)
extern _GET_BLOCK_TIMESTAMP_LAST() stack(1, 1) writes(CONTROL_FLOW)

const PACKED_RESERVE_SLOT
const RESERVE1_OFFSET

fn SYNC<z0>() -> () {
  LOCK<z0>()
  
  packedReserveSlot = sload(PACKED_RESERVE_SLOT)                                             // []
  reserve0 = _GET_RESERVE0(packedReserveSlot) // and(packedReserveSlot, 0xffffffffffffffffffffffffffff)   // [reserve0]
  reserve1 = _GET_RESERVE1(packedReserveSlot) // and(shr(RESERVE1_OFFSET, packedReserveSlot), 0xffffffffffffffffffffffffffff)   // [reserve1]
  blockTimestampLast = _GET_BLOCK_TIMESTAMP_LAST(packedReserveSlot) // shr(RESERVE1_OFFSET, packedReserveSlot)   // [blockTimestampLast]
  

  balance0 = SELF_BALANCE_TOKEN0<z0>()
  // InsufficientLiquidity() = 0xbb55fd27
  REQUIRE<z0, 0xbb55fd27>(balance0)
  
  balance1 = SELF_BALANCE_TOKEN1<z0>()
  // InsufficientLiquidity() = 0xbb55fd27
  REQUIRE<z0, 0xbb55fd27>(balance1)
  
  // balance0, balance1, reserve0, reserve1, blockTimestampLast
  _UPDATE<z0>(balance0, balance1, reserve0, reserve1, blockTimestampLast)
  

  UNLOCK()
  stop()
}

