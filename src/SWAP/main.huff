/// @title HuffSwap Pair LP Token
/// @notice SPDX-License-Identifier: MIT
/// @author 0x4non
/// @notice Some ideas were taken from Solmate, Solady and Huffmate

// ERC1363, imports ERC20, SafeMath and Storage
#include "src/ERC1363/main.huff"
#include "src/libraries/ReentrancyGuard.huff"
#include "src/libraries/SafeERC20.huff"

#define event Sync(uint112 reserve0, uint112 reserve1)

// balls-insert-start
#define macro GET_RESERVES(z0) = takes(0) returns(3) {
    // takes:                      []
    [PACKED_RESERVE_INFO]       // [PACKED_RESERVE_INFO]
    sload                       // [packedReserveSlot]
    dup1                        // [packedReserveSlot, packedReserveSlot]
    _GET_RESERVE1()             // [packedReserveSlot, reserve1]
    dup2                        // [packedReserveSlot, reserve1, packedReserveSlot]
    _GET_BLOCK_TIMESTAMP_LAST()
    //                             [packedReserveSlot, reserve1, blockTimestampLast]
    swap2                       // [blockTimestampLast, reserve1, packedReserveSlot]
    _GET_RESERVE0()             // [blockTimestampLast, reserve1, reserve0]
    0x60                        // [blockTimestampLast, reserve1, reserve0, 0x60]
    dup4                        // [blockTimestampLast, reserve1, reserve0, 0x60, blockTimestampLast]
    dup3                        // [blockTimestampLast, reserve1, reserve0, 0x60, blockTimestampLast, reserve0]
    <z0>                        // [blockTimestampLast, reserve1, reserve0, 0x60, blockTimestampLast, reserve0, z0]
    mstore                      // [blockTimestampLast, reserve1, reserve0, 0x60, blockTimestampLast]
    dup4                        // [blockTimestampLast, reserve1, reserve0, 0x60, blockTimestampLast, reserve1]
    0x20                        // [blockTimestampLast, reserve1, reserve0, 0x60, blockTimestampLast, reserve1, 0x20]
    mstore                      // [blockTimestampLast, reserve1, reserve0, 0x60, blockTimestampLast]
    0x40                        // [blockTimestampLast, reserve1, reserve0, 0x60, blockTimestampLast, 0x40]
    mstore                      // [blockTimestampLast, reserve1, reserve0, 0x60]
    <z0>                        // [blockTimestampLast, reserve1, reserve0, 0x60, z0]
    return                      // [blockTimestampLast, reserve1, reserve0]
    // returns:                    [blockTimestampLast, reserve1, reserve0]
}

#define macro _GET_BLOCK_TIMESTAMP_LAST() = takes(1) returns(1) {
    // takes:                      [packedReserveSlot]
    [BLOCK_TIMESTAMP_LAST_OFFSET]
    //                             [packedReserveSlot, BLOCK_TIMESTAMP_LAST_OFFSET]
    shr                         // [blockTimestampLast]
    // returns:                    [blockTimestampLast]
}

#define macro _GET_RESERVE0() = takes(1) returns(1) {
    // takes:                      [packedReserveSlot]
    0xffffffffffffffffffffffffffff
    //                             [packedReserveSlot, 0xffffffffffffffffffffffffffff]
    and                         // [reserve0]
    // returns:                    [reserve0]
}

#define macro _GET_RESERVE1() = takes(1) returns(1) {
    // takes:                      [packedReserveSlot]
    [RESERVE1_OFFSET]           // [packedReserveSlot, RESERVE1_OFFSET]
    shr                         // [shr(RESERVE1_OFFSET, packedReserveSlot)]
    0xffffffffffffffffffffffffffff
    //                             [shr(RESERVE1_OFFSET, packedReserveSlot), 0xffffffffffffffffffffffffffff]
    and                         // [reserve1]
    // returns:                    [reserve1]
}
// balls-insert-end


// extern (z0) stack(3, 0) reads(CONTROL_FLOW)
#define macro _UPDATE_CUMULATIVE_IFNEED(z0) = takes(3) returns(0) {
    // takes:                      [reserve1, reserve0, timeElapsed]
    dup3                    // [reserve1, reserve0, timeElapsed, reserve1]  
    dup3                    // [reserve1, reserve0, timeElapsed, reserve1, reserve0]
    dup3                    // [reserve1, reserve0, timeElapsed, reserve1, reserve0, timeElapsed]
    or                      // [reserve1, reserve0, timeElapsed, reserve1, reserve0 | timeElapsed]
    or                      // [reserve1, reserve0, timeElapsed, reserve1 | reserve0 | timeElapsed]
    iszero                  // [reserve1, reserve0, timeElapsed, (reserve1 | reserve0 | timeElapsed) == 0]
    skipCumulativeUpdate jumpi
    // takes:                      [reserve1, reserve0, timeElapsed]
    _UPDATE_CUMULATIVE(<z0>)
    // returns:                    [amount, allowanceAmount, allowanceSlot]
    skipCumulativeUpdate:
    pop pop pop
    // returns:                    []    
}


// balls-insert-start
#define macro ENCODE_UQ112() = takes(1) returns(1) {
    // takes:                      [r]
    0x10000000000000000000000000000
    //                             [r, 0x10000000000000000000000000000]
    mul                         // [mul(0x10000000000000000000000000000, r)]
    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    //                             [mul(0x10000000000000000000000000000, r), maskUint224]
    and                         // [encoded]
    // returns:                    [encoded]
}

#define macro TEST_UQ() = takes(3) returns(1) {
    // takes:                      [z, y, x]
    ENCODE_UQ112()              // [z, y, ENCODE_UQ112<>(x)]
    UQ_DIV()                    // [z, UQ_DIV<>(ENCODE_UQ112<>(x), y)]
    mul                         // [result]
    // returns:                    [result]
}

#define macro UQ_DIV() = takes(2) returns(1) {
    // takes:                      [y, x]
    div                         // [div(x, y)]
    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    //                             [div(x, y), maskUint224]
    and                         // [z]
    // returns:                    [z]
}

#define macro _EMIT_SYNC(z0) = takes(2) returns(0) {
    // takes:                      [balance1, balance0]
    <z0>                        // [balance1, balance0, z0]
    mstore                      // [balance1]
    0x20                        // [balance1, 0x20]
    mstore                      // []
    __EVENT_HASH(Sync)     // __EVENT_HASH(Sync)
    0x40                        // [_SYNC_EVENT_SIGNATURE, 0x40]
    <z0>                        // [_SYNC_EVENT_SIGNATURE, 0x40, z0]
    log1                        // []
    // returns:                    []
}

#define macro _UPDATE(z0) = takes(5) returns(0) {
    // takes:                      [blockTimestampLast, reserve1, reserve0, balance1, balance0]
    swap3                       // [blockTimestampLast, balance0, reserve0, balance1, reserve1]
    swap2                       // [blockTimestampLast, balance0, reserve1, balance1, reserve0]
    swap1                       // [blockTimestampLast, balance0, reserve1, reserve0, balance1]
    swap4                       // [balance1, balance0, reserve1, reserve0, blockTimestampLast]
    0xffffffffffffffffffffffffffff
    //                             [balance1, balance0, reserve1, reserve0, blockTimestampLast, 0xffffffffffffffffffffffffffff]
    dup6                        // [balance1, balance0, reserve1, reserve0, blockTimestampLast, 0xffffffffffffffffffffffffffff, balance1]
    gt                          // [balance1, balance0, reserve1, reserve0, blockTimestampLast, gt(balance1, 0xffffffffffffffffffffffffffff)]
    0xffffffffffffffffffffffffffff
    //                             [balance1, balance0, reserve1, reserve0, blockTimestampLast, gt(balance1, 0xffffffffffffffffffffffffffff), 0xffffffffffffffffffffffffffff]
    dup6                        // [balance1, balance0, reserve1, reserve0, blockTimestampLast, gt(balance1, 0xffffffffffffffffffffffffffff), 0xffffffffffffffffffffffffffff, balance0]
    gt                          // [balance1, balance0, reserve1, reserve0, blockTimestampLast, gt(balance1, 0xffffffffffffffffffffffffffff), gt(balance0, 0xffffffffffffffffffffffffffff)]
    iszero                      // [balance1, balance0, reserve1, reserve0, blockTimestampLast, gt(balance1, 0xffffffffffffffffffffffffffff), notOverflowBalance0]
    _REQUIRE(<z0>, 0x35278d12)  // [balance1, balance0, reserve1, reserve0, blockTimestampLast, gt(balance1, 0xffffffffffffffffffffffffffff)]
    iszero                      // [balance1, balance0, reserve1, reserve0, blockTimestampLast, notOverflowBalance1]
    _REQUIRE(<z0>, 0x35278d12)  // [balance1, balance0, reserve1, reserve0, blockTimestampLast]
    timestamp                   // [balance1, balance0, reserve1, reserve0, blockTimestampLast, timestamp()]
    sub                         // [balance1, balance0, reserve1, reserve0, sub(timestamp(), blockTimestampLast)]
    0xffffffff                  // [balance1, balance0, reserve1, reserve0, sub(timestamp(), blockTimestampLast), 0xffffffff]
    and                         // [balance1, balance0, reserve1, reserve0, timeElapsed]
    _UPDATE_CUMULATIVE_IFNEED(<z0>)
    //                             [balance1, balance0]
    dup2                        // [balance1, balance0, balance1]
    dup2                        // [balance1, balance0, balance1, balance0]
    _UPDATE_PACKED_RESERVE(<z0>)
    //                             [balance1, balance0]
    _EMIT_SYNC(<z0>)            // []
    // returns:                    []
}

#define macro _UPDATE_CUMULATIVE(z0) = takes(3) returns(3) {
    // takes:                      [reserve1, reserve0, timeElapsed]
    [P1CUMULATIVE_SLOT]         // [reserve1, reserve0, timeElapsed, P1CUMULATIVE_SLOT]
    sload                       // [reserve1, reserve0, timeElapsed, p1cumulative]
    dup2                        // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed]
    dup3                        // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, timeElapsed]
    dup5                        // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, timeElapsed, reserve0]
    dup7                        // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, timeElapsed, reserve0, reserve1]
    ENCODE_UQ112()              // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, timeElapsed, reserve0, ENCODE_UQ112<>(reserve1)]
    UQ_DIV()                    // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, timeElapsed, UQ_DIV<>(ENCODE_UQ112<>(reserve1), reserve0)]
    mul                         // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, p0]
    [P0CUMULATIVE_SLOT]         // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, p0, P0CUMULATIVE_SLOT]
    sload                       // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, p0, p0cumulative]
    add                         // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, add(p0cumulative, p0)]
    [P0CUMULATIVE_SLOT]         // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, add(p0cumulative, p0), P0CUMULATIVE_SLOT]
    sstore                      // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed]
    dup5                        // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, reserve1]
    dup5                        // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, reserve1, reserve0]
    ENCODE_UQ112()              // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, reserve1, ENCODE_UQ112<>(reserve0)]
    UQ_DIV()                    // [reserve1, reserve0, timeElapsed, p1cumulative, timeElapsed, UQ_DIV<>(ENCODE_UQ112<>(reserve0), reserve1)]
    mul                         // [reserve1, reserve0, timeElapsed, p1cumulative, p1]
    add                         // [reserve1, reserve0, timeElapsed, add(p1, p1cumulative)]
    [P1CUMULATIVE_SLOT]         // [reserve1, reserve0, timeElapsed, add(p1, p1cumulative), P1CUMULATIVE_SLOT]
    sstore                      // [reserve1, reserve0, timeElapsed]
    // returns:                    [reserve1, reserve0, timeElapsed]
}

#define macro _UPDATE_PACKED_RESERVE(z0) = takes(2) returns(0) {
    // takes:                      [balance1, balance0]
    swap1                       // [balance0, balance1]
    [RESERVE1_OFFSET]           // [balance0, balance1, RESERVE1_OFFSET]
    shl                         // [balance0, shl(RESERVE1_OFFSET, balance1)]
    timestamp                   // [balance0, shl(RESERVE1_OFFSET, balance1), timestamp()]
    [BLOCK_TIMESTAMP_LAST_OFFSET]
    //                             [balance0, shl(RESERVE1_OFFSET, balance1), timestamp(), BLOCK_TIMESTAMP_LAST_OFFSET]
    shl                         // [balance0, shl(RESERVE1_OFFSET, balance1), shl(BLOCK_TIMESTAMP_LAST_OFFSET, timestamp())]
    or                          // [balance0, or(shl(BLOCK_TIMESTAMP_LAST_OFFSET, timestamp()), shl(RESERVE1_OFFSET, balance1))]
    or                          // [packedData]
    [PACKED_RESERVE_SLOT]       // [packedData, PACKED_RESERVE_SLOT]
    sstore                      // []
    // returns:                    []
}
// balls-insert-end



// extern _MINT_FEE_IF_NOT() stack(3, 0)
#define macro _MINT_FEE_IF_NOT(z0) = takes(3) returns(0) {
    // takes:                           [reserve1, reserve0, klast, iszero(klast)]
    endMintFeeZeroCheck jumpi
    
    // takes:                      [reserve1, reserve0, klast]
    dup3                        // [reserve1, reserve0, klast, reserve1]
    dup3                        // [reserve1, reserve0, klast, reserve1, reserve0]

    // cant overflow (reserve are uint112); 0xffffffffffffffffffffffffffff * 0xffffffffffffffffffffffffffff = 0x00000000fffffffffffffffffffffffffffe0000000000000000000000000001
    mul                         // [reserve1, reserve0, klast, mul(reserve0, reserve1)]
    SQRT()                      // [reserve1, reserve0, klast, rootK]
    dup2                        // [reserve1, reserve0, klast, rootK, klast]
    SQRT()                      // [reserve1, reserve0, klast, rootK, rootKLast]
    dup2                        // [reserve1, reserve0, klast, rootK, rootKLast, rootK]
    dup2                        // [reserve1, reserve0, klast, rootK, rootKLast, rootK, rootKLast]
    lt                          // [reserve1, reserve0, klast, rootK, rootKLast, isGt]
    iszero
    skipMintFeeCalculation jumpi
    // stack here                  [reserve1, reserve0, klast, rootK, rootKLast]
    dup2                        // [reserve1, reserve0, klast, rootK, rootKLast, rootK]
    dup2                        // [reserve1, reserve0, klast, rootK, rootKLast, rootK, rootKLast]
    _MINT_FEE_CALCULATE(<z0>)   // [reserve1, reserve0, klast, rootK, rootKLast, liquidity]
    [FACTORY]                   // [reserve1, reserve0, klast, rootK, rootKLast, liquidity, FACTORY]
    _MINT(<z0>)                 // [reserve1, reserve0, klast, rootK, rootKLast]
    skipMintFeeCalculation:
    // stack here                  [reserve1, reserve0, klast, rootK, rootKLast]
    pop                         // [reserve1, reserve0, klast, rootK]
    pop                         // [reserve1, reserve0, klast]
    // returns:                    [reserve1, reserve0, klast]

    endMintFeeZeroCheck:
    
    // expected stack:                           [reserve1, reserve0, klast]
    pop
    pop
    pop
}

#define macro _MINT_CALCULATE(z0) = takes(4) returns(2) {
    // takes:                      [reserve1, reserve0, amount1, amount0]
    [TOTAL_SUPPLY_SLOT]         // [reserve1, reserve0, amount1, amount0, TOTAL_SUPPLY_SLOT]
    sload                       // [reserve1, reserve0, amount1, amount0, totalSupply]
    
    dup1 notFirstDepositJump jumpi
    
    // stack:                      [reserve1, reserve0, amount1, amount0, totalSupply]
    _CALC_LIQUIDITY_FIRST_DEPOSIT(<z0>)
    // stack: [liquidityToMint]
    endCalcLiquidity jump
    
    notFirstDepositJump:
    // calculate liquidity for mint knowing that totalSupply > 0
    // stack:                      [reserve1, reserve0, amount1, amount0, totalSupply]
    _CALC_LIQUIDITY_HAS_SUPPLY(<z0>)
    // stack: [liquidityToMint]
    
    endCalcLiquidity:
    // returns:                    [liquidityToMint]
}

// balls-insert-start
#define macro MINT(z0) = takes(0) returns(0) {
    // takes:                      []
    0x20                        // [0x20]
    [PACKED_RESERVE_SLOT]       // [0x20, PACKED_RESERVE_SLOT]
    LOCK(<z0>)                  // [0x20, PACKED_RESERVE_SLOT]
    sload                       // [0x20, packedData]
    dup1                        // [0x20, packedData, packedData]
    _GET_RESERVE1()             // [0x20, packedData, reserve1]
    swap1                       // [0x20, reserve1, packedData]
    _GET_RESERVE0()             // [0x20, reserve1, reserve0]
    address                     // [0x20, reserve1, reserve0, address()]
    [TOKEN0]                    // [0x20, reserve1, reserve0, address(), TOKEN0]
    ERC20_BALANCE_OF(<z0>)      // [0x20, reserve1, reserve0, balance0]
    dup2                        // [0x20, reserve1, reserve0, balance0, reserve0]
    dup2                        // [0x20, reserve1, reserve0, balance0, reserve0, balance0]
    SAFE_SUB_ERR(<z0>, 0x2a2ab278)
    //                             [0x20, reserve1, reserve0, balance0, amount0]
    address                     // [0x20, reserve1, reserve0, balance0, amount0, address()]
    [TOKEN1]                    // [0x20, reserve1, reserve0, balance0, amount0, address(), TOKEN1]
    ERC20_BALANCE_OF(<z0>)      // [0x20, reserve1, reserve0, balance0, amount0, balance1]
    dup5                        // [0x20, reserve1, reserve0, balance0, amount0, balance1, reserve1]
    dup2                        // [0x20, reserve1, reserve0, balance0, amount0, balance1, reserve1, balance1]
    SAFE_SUB_ERR(<z0>, 0x2a2ab278)
    //                             [0x20, reserve1, reserve0, balance0, amount0, balance1, amount1]
    swap3                       // [0x20, reserve1, reserve0, amount1, amount0, balance1, balance0]
    dup6                        // [0x20, reserve1, reserve0, amount1, amount0, balance1, balance0, reserve1]
    dup6                        // [0x20, reserve1, reserve0, amount1, amount0, balance1, balance0, reserve1, reserve0]
    _MINT_FEE(<z0>)             // [0x20, reserve1, reserve0, amount1, amount0, balance1, balance0]
    SAFE_MUL(<z0>)              // [0x20, reserve1, reserve0, amount1, amount0, SAFE_MUL<z0>(balance0, balance1)]
    [KLAST_SLOT]                // [0x20, reserve1, reserve0, amount1, amount0, SAFE_MUL<z0>(balance0, balance1), KLAST_SLOT]
    sstore                      // [0x20, reserve1, reserve0, amount1, amount0]
    _MINT_CALCULATE(<z0>)       // [0x20, liquidityToMint]
    dup1                        // [0x20, liquidityToMint, liquidityToMint]
    0x4                         // [0x20, liquidityToMint, liquidityToMint, 0x4]
    calldataload                // [0x20, liquidityToMint, liquidityToMint, to]
    _MINT(<z0>)                 // [0x20, liquidityToMint]
    UNLOCK()                    // [0x20, liquidityToMint]
    <z0>                        // [0x20, liquidityToMint, z0]
    mstore                      // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro _CALC_LIQUIDITY_FIRST_DEPOSIT(z0) = takes(5) returns(1) {
    // takes:                      [reserve0, reserve1, amount0, amount1, totalSupply]
    swap2                       // [reserve0, reserve1, totalSupply, amount1, amount0]
    SAFE_MUL(<z0>)              // [reserve0, reserve1, totalSupply, SAFE_MUL<z0>(amount0, amount1)]
    SQRT()                      // [reserve0, reserve1, totalSupply, liquidityToMint]
    [MINIMUM_LIQUIDITY]         // [reserve0, reserve1, totalSupply, liquidityToMint, MINIMUM_LIQUIDITY]
    dup2                        // [reserve0, reserve1, totalSupply, liquidityToMint, MINIMUM_LIQUIDITY, liquidityToMint]
    sub                         // [reserve0, reserve1, totalSupply, liquidityToMint, liquidityToMint]
    swap4                       // [liquidityToMint, reserve1, totalSupply, liquidityToMint, reserve0]
    pop                         // [liquidityToMint, reserve1, totalSupply, liquidityToMint]
    [MINIMUM_LIQUIDITY]         // [liquidityToMint, reserve1, totalSupply, liquidityToMint, MINIMUM_LIQUIDITY]
    <z0>                        // [liquidityToMint, reserve1, totalSupply, liquidityToMint, MINIMUM_LIQUIDITY, z0]
    _MINT(<z0>)                 // [liquidityToMint, reserve1, totalSupply, liquidityToMint]
    [MINIMUM_LIQUIDITY]         // [liquidityToMint, reserve1, totalSupply, liquidityToMint, MINIMUM_LIQUIDITY]
    lt                          // [liquidityToMint, reserve1, totalSupply, lt(MINIMUM_LIQUIDITY, liquidityToMint)]
    _REQUIRE(<z0>, 0xbb55fd27)  // [liquidityToMint, reserve1, totalSupply]
    pop                         // [liquidityToMint, reserve1]
    pop                         // [liquidityToMint]
    // returns:                    [liquidityToMint]
}

#define macro _CALC_LIQUIDITY_HAS_SUPPLY(z0) = takes(5) returns(1) {
    // takes:                      [reserve0, reserve1, amount0, amount1, totalSupply]
    swap2                       // [reserve0, reserve1, totalSupply, amount1, amount0]
    swap4                       // [amount0, reserve1, totalSupply, amount1, reserve0]
    swap3                       // [amount0, reserve0, totalSupply, amount1, reserve1]
    swap1                       // [amount0, reserve0, totalSupply, reserve1, amount1]
    dup3                        // [amount0, reserve0, totalSupply, reserve1, amount1, totalSupply]
    swap1                       // [amount0, reserve0, totalSupply, reserve1, totalSupply, amount1]
    MUL_DIV(<z0>)               // [amount0, reserve0, totalSupply, MUL_DIV<z0>(amount1, totalSupply, reserve1)]
    swap3                       // [MUL_DIV<z0>(amount1, totalSupply, reserve1), reserve0, totalSupply, amount0]
    MUL_DIV(<z0>)               // [MUL_DIV<z0>(amount1, totalSupply, reserve1), MUL_DIV<z0>(amount0, totalSupply, reserve0)]
    MIN()                       // [liquidityToMint]
    // returns:                    [liquidityToMint]
}

#define macro _MINT_FEE(z0) = takes(2) returns(0) {
    // takes:                      [reserve1, reserve0]
    [KLAST_SLOT]                // [reserve1, reserve0, KLAST_SLOT]
    sload                       // [reserve1, reserve0, klast]
    dup1                        // [reserve1, reserve0, klast, klast]
    iszero                      // [reserve1, reserve0, klast, iszero(klast)]
    _MINT_FEE_IF_NOT(<z0>)      // []
    // returns:                    []
}

#define macro _MINT_FEE_CALCULATE(z0) = takes(2) returns(1) {
    // takes:                      [rootK, rootKLast]
    dup2                        // [rootK, rootKLast, rootK]
    0x5                         // [rootK, rootKLast, rootK, 0x5]
    mul                         // [rootK, rootKLast, mul(0x5, rootK)]
    dup2                        // [rootK, rootKLast, mul(0x5, rootK), rootKLast]
    add                         // [rootK, rootKLast, add(rootKLast, mul(0x5, rootK))]
    swap2                       // [add(rootKLast, mul(0x5, rootK)), rootKLast, rootK]
    sub                         // [add(rootKLast, mul(0x5, rootK)), sub(rootK, rootKLast)]
    [TOTAL_SUPPLY_SLOT]         // [add(rootKLast, mul(0x5, rootK)), sub(rootK, rootKLast), TOTAL_SUPPLY_SLOT]
    sload                       // [add(rootKLast, mul(0x5, rootK)), sub(rootK, rootKLast), totalSupply]
    MUL_DIV(<z0>)               // [liquidity]
    // returns:                    [liquidity]
}
// balls-insert-end
