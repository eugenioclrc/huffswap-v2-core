// balls-insert-start
#define macro BURN(z0) = takes(0) returns(0) {
    // takes:                      []
    [PACKED_RESERVE_SLOT]       // [PACKED_RESERVE_SLOT]
    LOCK(<z0>)                  // [PACKED_RESERVE_SLOT]
    sload                       // [packedReserveSlot]
    [TOKEN1]                    // [packedReserveSlot, TOKEN1]
    _BURN_AMOUNT()              // [packedReserveSlot, TOKEN1, burnAmount]
    address                     // [packedReserveSlot, TOKEN1, burnAmount, address()]
    address                     // [packedReserveSlot, TOKEN1, burnAmount, address(), address()]
    [TOKEN0]                    // [packedReserveSlot, TOKEN1, burnAmount, address(), address(), TOKEN0]
    ERC20_BALANCE_OF(<z0>)      // [packedReserveSlot, TOKEN1, burnAmount, address(), balance0]
    swap3                       // [packedReserveSlot, balance0, burnAmount, address(), TOKEN1]
    ERC20_BALANCE_OF(<z0>)      // [packedReserveSlot, balance0, burnAmount, balance1]
    dup4                        // [packedReserveSlot, balance0, burnAmount, balance1, packedReserveSlot]
    _GET_RESERVE1()             // [packedReserveSlot, balance0, burnAmount, balance1, reserve1]
    dup5                        // [packedReserveSlot, balance0, burnAmount, balance1, reserve1, packedReserveSlot]
    _GET_RESERVE0()             // [packedReserveSlot, balance0, burnAmount, balance1, reserve1, reserve0]
    0x4                         // [packedReserveSlot, balance0, burnAmount, balance1, reserve1, reserve0, 0x4]
    calldataload                // [packedReserveSlot, balance0, burnAmount, balance1, reserve1, reserve0, to]
    swap6                       // [to, balance0, burnAmount, balance1, reserve1, reserve0, packedReserveSlot]
    _GET_BLOCK_TIMESTAMP_LAST()
    //                             [to, balance0, burnAmount, balance1, reserve1, reserve0, blockTimestampLast]
    swap3                       // [to, balance0, burnAmount, blockTimestampLast, reserve1, reserve0, balance1]
    dup3                        // [to, balance0, burnAmount, blockTimestampLast, reserve1, reserve0, balance1, reserve1]
    dup3                        // [to, balance0, burnAmount, blockTimestampLast, reserve1, reserve0, balance1, reserve1, reserve0]
    _MINT_FEE(<z0>)             // [to, balance0, burnAmount, blockTimestampLast, reserve1, reserve0, balance1]
    _TOTAL_SUPPLY()             // [to, balance0, burnAmount, blockTimestampLast, reserve1, reserve0, balance1, totalSupply]
    dup1                        // [to, balance0, burnAmount, blockTimestampLast, reserve1, reserve0, balance1, totalSupply, totalSupply]
    swap2                       // [to, balance0, burnAmount, blockTimestampLast, reserve1, reserve0, totalSupply, totalSupply, balance1]
    dup7                        // [to, balance0, burnAmount, blockTimestampLast, reserve1, reserve0, totalSupply, totalSupply, balance1, burnAmount]
    MUL_DIV(<z0>)               // [to, balance0, burnAmount, blockTimestampLast, reserve1, reserve0, totalSupply, amount1]
    swap6                       // [to, amount1, burnAmount, blockTimestampLast, reserve1, reserve0, totalSupply, balance0]
    dup6                        // [to, amount1, burnAmount, blockTimestampLast, reserve1, reserve0, totalSupply, balance0, burnAmount]
    MUL_DIV(<z0>)               // [to, amount1, burnAmount, blockTimestampLast, reserve1, reserve0, amount0]
    swap4                       // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0, burnAmount]
    address                     // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0, burnAmount, address()]
    dup7                        // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0, burnAmount, address(), amount1]
    dup7                        // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0, burnAmount, address(), amount1, amount0]
    or                          // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0, burnAmount, address(), or(amount0, amount1)]
    REQUIRE(<z0>, 0x749383ad)   // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0, burnAmount, address()]
    _BURN(<z0>)                 // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0]
    dup5                        // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0, amount1]
    dup7                        // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0, amount1, to]
    dup6                        // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0, amount1, to, amount0]
    dup9                        // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0, amount1, to, amount0, to]
    [TOKEN0]                    // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0, amount1, to, amount0, to, TOKEN0]
    ERC20_TRANSFER(<z0>)        // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0, amount1, to]
    [TOKEN1]                    // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0, amount1, to, TOKEN1]
    ERC20_TRANSFER(<z0>)        // [to, amount1, amount0, blockTimestampLast, reserve1, reserve0]
    _BURN_LAST_UPDATE(<z0>)     // [to, amount1, amount0]
    UNLOCK()                    // [to, amount1, amount0]
    _BURN_FINAL_RETURN(<z0>)    // []
    // returns:                    []
}

#define macro _BURN_AMOUNT() = takes(0) returns(1) {
    // takes:                      []
    address                     // [address()]
    sload                       // [amount]
    // returns:                    [amount]
}

#define macro _BURN_FINAL_RETURN(z0) = takes(3) returns(0) {
    // takes:                      [to, amount1, amount0]
    <z0>                        // [to, amount1, amount0, z0]
    mstore                      // [to, amount1]
    0x20                        // [to, amount1, 0x20]
    mstore                      // [to]
    caller                      // [to, caller()]
    [_BURN_EVENT_SIGNATURE]     // [to, caller(), _BURN_EVENT_SIGNATURE]
    0x40                        // [to, caller(), _BURN_EVENT_SIGNATURE, 0x40]
    <z0>                        // [to, caller(), _BURN_EVENT_SIGNATURE, 0x40, z0]
    log3                        // []
    0x40                        // [0x40]
    <z0>                        // [0x40, z0]
    return                      // []
    // returns:                    []
}

#define macro _BURN_LAST_UPDATE(z0) = takes(3) returns(0) {
    // takes:                      [blockTimestampLast, reserve1, reserve0]
    swap2                       // [reserve0, reserve1, blockTimestampLast]
    address                     // [reserve0, reserve1, blockTimestampLast, address()]
    [TOKEN0]                    // [reserve0, reserve1, blockTimestampLast, address(), TOKEN0]
    ERC20_BALANCE_OF(<z0>)      // [reserve0, reserve1, blockTimestampLast, balance0]
    swap2                       // [reserve0, balance0, blockTimestampLast, reserve1]
    address                     // [reserve0, balance0, blockTimestampLast, reserve1, address()]
    [TOKEN1]                    // [reserve0, balance0, blockTimestampLast, reserve1, address(), TOKEN1]
    ERC20_BALANCE_OF(<z0>)      // [reserve0, balance0, blockTimestampLast, reserve1, balance1]
    swap4                       // [balance1, balance0, blockTimestampLast, reserve1, reserve0]
    dup5                        // [balance1, balance0, blockTimestampLast, reserve1, reserve0, balance1]
    dup5                        // [balance1, balance0, blockTimestampLast, reserve1, reserve0, balance1, balance0]
    _UPDATE(<z0>)               // [balance1, balance0]
    mul                         // [kLast]
    [KLAST_SLOT]                // [kLast, KLAST_SLOT]
    sstore                      // []
    // returns:                    []
}

#define macro _TOTAL_SUPPLY() = takes(0) returns(1) {
    // takes:                      []
    [TOTAL_SUPPLY_SLOT]         // [TOTAL_SUPPLY_SLOT]
    sload                       // [totalSupply]
    // returns:                    [totalSupply]
}
// balls-insert-end