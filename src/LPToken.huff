#include "src/SWAP/main.huff"

// Define Interface

#define function allowance(address,address) view returns (uint256)
#define function approve(address,uint256) nonpayable returns (bool)
#define function approveAndCall(address,uint256) nonpayable returns (bool)
#define function approveAndCall(address,uint256,bytes) nonpayable returns (bool)
#define function balanceOf(address) view returns (uint256)
#define function burn(address) nonpayable returns (uint256, uint256)
#define function decimals() view returns (uint8)
#define function getReserves() view returns (uint112, uint112, uint32)
#define function kLast() view returns (uint256)
#define function mint(address) nonpayable returns (uint256)
#define function name() view returns (string)
#define function price0CumulativeLast() view returns (uint256)
#define function price1CumulativeLast() view returns (uint256)
#define function skim(address) nonpayable returns ()
#define function supportsInterface(bytes4) view returns (bool)
#define function swap(uint256,uint256,address,bytes) nonpayable returns ()
#define function symbol() view returns (string)
#define function sync() nonpayable returns ()
#define function totalSupply() view returns (uint256)
#define function transfer(address,uint256) nonpayable returns (bool)
#define function transferAndCall(address,uint256) nonpayable returns (bool)
#define function transferAndCall(address,uint256,bytes) nonpayable returns (bool)
#define function transferFrom(address,address,uint256) nonpayable returns (bool)
#define function transferFromAndCall(address,address,uint256,bytes) nonpayable returns (bool)
#define function transferFromAndCall(address,address,uint256) nonpayable returns (bool)
#define function MINIMUM_LIQUIDITY() pure returns (uint256)


// Function Dispatching
#define macro DISPATCHER(z0) = takes (1) returns (1) {
    // Identify which function is being called.
    // [func sig]
    <z0> calldataload 0xE0 shr

    // this is the most used function
    dup1 __FUNC_SIG(swap) eq swapJump jumpi
    
    // pivot0 cut on function mint(address) returns (uint256) 0x6a627842
    dup1 __FUNC_SIG(mint) lt pivot0 jumpi
            
        // pivot00 cut on function transferFrom(address,address,uint256) returns (bool) 0x23b872dd
        dup1 __FUNC_SIG(transferFrom) lt pivot00 jumpi
                  
              // pivot000 cut on function approve(address,uint256) returns (bool) 0x095ea7b3
              dup1 __FUNC_SIG(approve) lt pivot000 jumpi
                          // function supportsInterface(bytes4) view returns (bool)
                      dup1 __FUNC_SIG(supportsInterface)  eq supportsInterfaceJump   jumpi
              
                      // function name() view returns (string)
                      dup1 __FUNC_SIG(name)  eq nameJump   jumpi
              
                      // function getReserves() view returns (uint112, uint112, uint32)
                      dup1 __FUNC_SIG(getReserves)  eq getReservesJump   jumpi
              
              
                      not_found jump
              
              pivot000:
                      // function approve(address,uint256) returns (bool)
                      dup1 __FUNC_SIG(approve)  eq approveJump   jumpi
              
                      // function transferAndCall(address,uint256) returns (bool)
                      dup1 __FUNC_SIG("transferAndCall(address,uint256)") eq transferAndCallJump   jumpi
              
                      // function totalSupply() view returns (uint256)
                      dup1 __FUNC_SIG(totalSupply)  eq totalSupplyJump   jumpi
              
              
                      not_found jump
              
              
        
        pivot00:
                  
              // pivot001 cut on function transferAndCall(address,uint256,bytes) returns (bool) 0x4000aea0
              dup1 __FUNC_SIG("transferAndCall(address,uint256,bytes)") lt pivot001 jumpi
                      // function transferFrom(address,address,uint256) returns (bool)
                      dup1 __FUNC_SIG(transferFrom)  eq transferFromJump   jumpi
              
                      // function decimals() view returns (uint8)
                      dup1 __FUNC_SIG(decimals)  eq decimalsJump   jumpi
              
                      // function approveAndCall(address,uint256) returns (bool)
                      dup1 __FUNC_SIG("approveAndCall(address,uint256)")  eq approveAndCallJump   jumpi
              
              
                      not_found jump
              
              pivot001:
                      // function mint(address) returns (uint256)
                      dup1 __FUNC_SIG(mint)  eq mintJump   jumpi
                      // function transferAndCall(address,uint256,bytes) returns (bool)
                      dup1 __FUNC_SIG("transferAndCall(address,uint256,bytes)")  eq transferAndCallJump   jumpi
              
                      // function price0CumulativeLast() view returns (uint256)
                      dup1 __FUNC_SIG(price0CumulativeLast)  eq price0CumulativeLastJump   jumpi
              
                      // function price1CumulativeLast() view returns (uint256)
                      dup1 __FUNC_SIG(price1CumulativeLast)  eq price1CumulativeLastJump   jumpi
              
              
                      not_found jump
              
              
        
        
    
    pivot0:
            
        // pivot01 cut on function skim(address) 0xbc25cf77
        dup1 __FUNC_SIG(skim) lt pivot01 jumpi
                  
              // pivot010 cut on function burn(address) returns (uint256, uint256) 0x89afcb44
              dup1 __FUNC_SIG(burn) lt pivot010 jumpi
                      // function mint(address) returns (uint256)
                      dup1 __FUNC_SIG(mint)  eq mintJump   jumpi
              
                      // function balanceOf(address) view returns (uint256)
                      dup1 __FUNC_SIG(balanceOf)  eq balanceOfJump   jumpi
              
                      // function kLast() view returns (uint256)
                      dup1 __FUNC_SIG(kLast)  eq kLastJump   jumpi
              
              
                      not_found jump
              
              pivot010:
                          // function burn(address) returns (uint256, uint256)
                      dup1 __FUNC_SIG(burn)  eq burnJump   jumpi
              
                      // function symbol() view returns (string)
                      dup1 __FUNC_SIG(symbol)  eq symbolJump   jumpi
              
                      // function transfer(address,uint256) returns (bool)
                      dup1 __FUNC_SIG(transfer)  eq transferJump   jumpi
              
              
                      not_found jump
              
              
        
        pivot01:
                  
              // pivot011 cut on function transferFromAndCall(address,address,uint256) returns (bool) 0xd8fbe994
              dup1 __FUNC_SIG("transferFromAndCall(address,address,uint256)") lt pivot011 jumpi
                          // function skim(address)
                      dup1 __FUNC_SIG(skim)  eq skimJump   jumpi
              
                      // function transferFromAndCall(address,address,uint256,bytes) returns (bool)
                      dup1 0xc1d34b89  eq transferFromAndCallJump   jumpi
              
                      // function approveAndCall(address,uint256,bytes) returns (bool)
                      dup1 __FUNC_SIG(approveAndCall2)  eq approveAndCallJump   jumpi
              
              
                      not_found jump
              
              pivot011:
                          // function transferFromAndCall(address,address,uint256) returns (bool)
                      dup1 __FUNC_SIG("transferFromAndCall(address,address,uint256)")  eq transferFromAndCallJump   jumpi
              
                      // function allowance(address,address) view returns (uint256)
                      dup1 __FUNC_SIG(allowance)  eq allowanceJump   jumpi
              
                      // function sync()
                      dup1 __FUNC_SIG(sync)  eq syncJump   jumpi
             
              
                      not_found jump
    

    not_found:
      dup1 __FUNC_SIG(MINIMUM_LIQUIDITY) eq minLiquidityJump jumpi

      // Revert if no match is found.
      __FUNC_SIG("SelectorNotFound()") <z0> mstore
      0x04 0x1c revert
    
    swapJump:
      // @todo SWAP(<z0>)
      0x01 0x00 revert

    // function supportsInterface(bytes4) view returns (bool) 
    supportsInterfaceJump:
      // @todo SUPPORTS_INTERFACE()
      0x02 0x00 revert
    // function name() view returns (string) 
    nameJump:
      NAME(<z0>)

    // function getReserves() view returns (uint112, uint112, uint32) 
    getReservesJump:
      GET_RESERVES(<z0>)

    // function approve(address,uint256) returns (bool) 
    approveJump:
      APPROVE(<z0>)

    // function transferAndCall(address,uint256) returns (bool) 
    // function transferAndCall(address,uint256, bytes) returns (bool) 
    transferAndCallJump:
      TRANSFER_AND_CALL(<z0>)

    // function totalSupply() view returns (uint256) 
    totalSupplyJump:
      TOTAL_SUPPLY(<z0>)

    // function transferFrom(address,address,uint256) returns (bool) 
    transferFromJump:
      TRANSFER_FROM(<z0>)

    // function decimals() view returns (uint8) 
    decimalsJump:
      DECIMALS(<z0>)

    // function approveAndCall(address,uint256) returns (bool) 
    // function approveAndCall(address,uint256,bytes) returns (bool) 
    approveAndCallJump:
      APPROVE_AND_CALL(<z0>)


    // function price0CumulativeLast() view returns (uint256) 
    price0CumulativeLastJump:
      PRICE0_CUMULATIVE_LAST(<z0>)

    // function price1CumulativeLast() view returns (uint256) 
    price1CumulativeLastJump:
      PRICE1_CUMULATIVE_LAST(<z0>)

    // function mint(address) returns (uint256) 
    mintJump:
      MINT(<z0>)

    // function balanceOf(address) view returns (uint256) 
    balanceOfJump:
      BALANCE_OF(<z0>)

    // function kLast() view returns (uint256) 
    kLastJump:
      K_LAST(<z0>)

    // function burn(address) returns (uint256, uint256) 
    burnJump:
      // @todo BURN(<z0>)
      0x03 0x00 revert

    // function symbol() view returns (string) 
    symbolJump:
      SYMBOL(<z0>)

    // function transfer(address,uint256) returns (bool) 
    transferJump:
      TRANSFER(<z0>)

    // function skim(address) 
    skimJump:
      // @todo SKIM(<z0>)
      0x04 0x00 revert

    // function transferFromAndCall(address,address,uint256) returns (bool) 
    // function transferFromAndCall(address,address,uint256,bytes) returns (bool) 
    transferFromAndCallJump:
      TRANSFER_FROM_AND_CALL(<z0>)
    
    // function allowance(address,address) view returns (uint256) 
    allowanceJump:
      ALLOWANCE(<z0>)
    
    // function sync() 
    syncJump:
      // @todo SYNC(<z0>)
      0x05 0x00 revert

    minLiquidityJump:
      [MINIMUM_LIQUIDITY] <z0> mstore
      0x20 <z0> return
}


#define macro MAIN() = takes (0) returns (0) {
  callvalue nonPayableJUMP jumpi
  
  // call disptacher
  DISPATCHER(callvalue)
  
  nonPayableJUMP:
    __FUNC_SIG("NonPayable()") 0x00 mstore
    0x04 0x1c revert

}
