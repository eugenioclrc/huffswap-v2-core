// balls-insert-start
#define macro TRANSFER_AND_CALL(z0) = takes(0) returns(0) {
    // takes:                      []
    0x20                        // [0x20]
    0x1                         // [0x20, 0x1]
    [ADDRESS_MASK]              // [0x20, 0x1, ADDRESS_MASK]
    0x4                         // [0x20, 0x1, ADDRESS_MASK, 0x4]
    calldataload                // [0x20, 0x1, ADDRESS_MASK, calldataload(0x4)]
    and                         // [0x20, 0x1, to]
    0x24                        // [0x20, 0x1, to, 0x24]
    calldataload                // [0x20, 0x1, to, amount]
    dup2                        // [0x20, 0x1, to, amount, to]
    caller                      // [0x20, 0x1, to, amount, to, caller()]
    dup3                        // [0x20, 0x1, to, amount, to, caller(), amount]
    caller                      // [0x20, 0x1, to, amount, to, caller(), amount, caller()]
    sload                       // [0x20, 0x1, to, amount, to, caller(), amount, senderBalance]
    SAFE_SUB_ERR(<z0>, 0xf4d678b8)
    //                             [0x20, 0x1, to, amount, to, caller(), newSenderBalance]
    caller                      // [0x20, 0x1, to, amount, to, caller(), newSenderBalance, caller()]
    dup5                        // [0x20, 0x1, to, amount, to, caller(), newSenderBalance, caller(), amount]
    0x44                        // [0x20, 0x1, to, amount, to, caller(), newSenderBalance, caller(), amount, 0x44]
    mstore                      // [0x20, 0x1, to, amount, to, caller(), newSenderBalance, caller()]
    sstore                      // [0x20, 0x1, to, amount, to, caller()]
    [_TRANSFER_EVENT_SIGNATURE]
    //                             [0x20, 0x1, to, amount, to, caller(), _TRANSFER_EVENT_SIGNATURE]
    0x20                        // [0x20, 0x1, to, amount, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20]
    0x44                        // [0x20, 0x1, to, amount, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, 0x44]
    log3                        // [0x20, 0x1, to, amount]
    dup2                        // [0x20, 0x1, to, amount, to]
    sload                       // [0x20, 0x1, to, amount, sload(to)]
    add                         // [0x20, 0x1, to, add(sload(to), amount)]
    dup2                        // [0x20, 0x1, to, add(sload(to), amount), to]
    sstore                      // [0x20, 0x1, to]
    _TRANSFER_HOOK(<z0>)        // [0x20, 0x1]
    <z0>                        // [0x20, 0x1, z0]
    mstore                      // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro _TRANSFER_HOOK(z0) = takes(1) returns(0) {
    // takes:                      [to]
    <z0>                        // [to, z0]
    0x20                        // [to, z0, 0x20]
    <z0>                        // [to, z0, 0x20, z0]
    0x60                        // [to, z0, 0x20, z0, 0x60]
    calldatasize                // [to, z0, 0x20, z0, 0x60, calldatasize()]
    add                         // [to, z0, 0x20, z0, add(calldatasize(), 0x60)]
    <z0>                        // [to, z0, 0x20, z0, add(calldatasize(), 0x60), z0]
    <z0>                        // [to, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0]
    [SIG_onTransferReceived]    // [to, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, SIG_onTransferReceived]
    0xe0                        // [to, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, SIG_onTransferReceived, 0xe0]
    shl                         // [to, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, shiftedFunctionSig]
    swap7                       // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to]
    gas                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas()]
    0x80                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80]
    0x64                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64]
    caller                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller()]
    0x4                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4]
    dup13                       // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig]
    0x44                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig, 0x44]
    calldatasize                // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig, 0x44, calldatasize()]
    sub                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig, sub(calldatasize(), 0x44)]
    0x44                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig, sub(calldatasize(), 0x44), 0x44]
    0x64                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig, sub(calldatasize(), 0x44), 0x44, 0x64]
    calldatacopy                // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig]
    <z0>                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig, z0]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64]
    caller                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller()]
    0x24                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x24]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas()]
    call                        // [shiftedFunctionSig, z0, callOk]
    REQUIRE(<z0>, 0x85b16394)   // [shiftedFunctionSig, z0]
    mload                       // [shiftedFunctionSig, ret]
    eq                          // [eq(ret, shiftedFunctionSig)]
    REQUIRE(<z0>, 0x85b16394)   // []
    // returns:                    []
}
// balls-insert-end