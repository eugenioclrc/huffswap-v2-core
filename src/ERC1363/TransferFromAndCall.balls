extern _REQUIRE(z0, err) stack(1, 0) writes(CONTROL_FLOW)
extern SAFE_SUB_ERR(z0, err) stack(2, 1)
extern _USE_ALLOWANCE(z0) stack(3, 0) writes(CONTROL_FLOW)
extern _TRANSFER_FROM(z0, memptr) stack(/*from, to, amount*/ 3, 0) writes(CONTROL_FLOW, MEMORY)
extern _TRANSFER_FROM_HOOK(z0) stack(/*from, to, amount*/ 2, 0) writes(CONTROL_FLOW, MEMORY)

const _APPROVAL_EVENT_SIGNATURE
const _TRANSFER_EVENT_SIGNATURE
const SIG_onTransferReceived
const ADDRESS_MASK


fn TRANSFER_FROM_AND_CALL<z0>() -> () {
    from = and(calldataload(0x04), ADDRESS_MASK)
    to = and(calldataload(0x24), ADDRESS_MASK)
    amount = calldataload(0x44)

    fromBalance = sload(from)
    // caller() is the spender
    _USE_ALLOWANCE<z0>(from, caller(), amount)
    
    _TRANSFER_FROM<z0, 0x44>(from, to, amount)
  
    _TRANSFER_FROM_HOOK<z0>(from, to)
    
    // reuse callOk to avoid push1 0x01
    mstore(z0, 0x01)
    return(z0, 0x20)
}
