extern _REQUIRE(z0, err) stack(1, 0) reads(CONTROL_FLOW)
extern SAFE_SUB_ERR(z0, err) stack(2, 1)
extern GET_SLOT_FROM_KEYS(z0) stack(2, 1) writes(CONTROL_FLOW)

const _APPROVAL_EVENT_SIGNATURE
const _TRANSFER_EVENT_SIGNATURE
const SIG_onApprovalReceived
const ADDRESS_MASK

fn APPROVE_AND_CALL<z0>() -> () {
  spender = calldataload(0x04)
  amount = calldataload(0x24)

  slot = GET_SLOT_FROM_KEYS<z0>(caller(), spender)

  sstore(slot, amount)
  
  // split into functions because it was messing the memory
  _APPROVE_SET_AMOUNT_AND_LOG(spender)
  
  _APPROVE_HOOK<z0>(spender)
  mstore(z0, 0x01)
  return(z0, 0x20)  
}


fn _APPROVE_SET_AMOUNT_AND_LOG(spender) -> () reads(CONTROL_FLOW) writes(MEMORY) {
  calldatacopy(0x24, 0x24, sub(calldatasize(), 0x24))
  log3(0x24, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), spender)
}

fn _APPROVE_HOOK<z0>(spender) -> () reads(CONTROL_FLOW, MEMORY) {
  shiftedFunctionSig = shl(0xe0, SIG_onApprovalReceived)
  mstore(z0, shiftedFunctionSig)
  mstore(0x04, caller())
  mstore(0x44, 0x60)
  
  callOk = call(gas(), spender, z0, z0, add(calldatasize(), 0x40), z0, 0x20)
  // error Spender_onApprovalReceived_rejected() = 0x81cbe4db
  _REQUIRE<z0, 0x81cbe4db>(callOk)
  ret = mload(z0)
  // error Receiver_transferReceived_rejected() = 0x81cbe4db
  // __FUNC_SIG("onApprovalReceived(address,uint256,bytes)") 0xe0 shl
  _REQUIRE<z0, 0x81cbe4db>(eq(ret, shiftedFunctionSig))
  
  
}
