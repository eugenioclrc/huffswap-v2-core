/// @title ERC1363 Payable token
/// @notice SPDX-License-Identifier: MIT
/// @author 0x4non
/// @notice Some ideas were taken from Solmate, Solady and Huffmate

#include "../ERC20/main.huff"

// Interface

#define function approveAndCall(address,uint256,bytes) nonpayable returns ()
#define function transferAndCall(address,uint256,bytes) nonpayable returns ()

// Events
#define event Approval(address indexed, address indexed, uint256)
#define event Transfer(address, address, uint256)

// Errors
#define error InsufficientBalance()
#define error InsufficientAllowance()

#define constant ADDRESS_MASK = 0xffffffffffffffffffffffffffffffffffffffff



// balls-insert-start
#define macro TRANSFER_AND_CALL(z0) = takes(0) returns(0) {
    // takes:                      []
    0x20                        // [0x20]
    0x1                         // [0x20, 0x1]
    [ADDRESS_MASK]              // [0x20, 0x1, ADDRESS_MASK]
    0x4                         // [0x20, 0x1, ADDRESS_MASK, 0x4]
    calldataload                // [0x20, 0x1, ADDRESS_MASK, calldataload(0x4)]
    and                         // [0x20, 0x1, to]
    0x24                        // [0x20, 0x1, to, 0x24]
    calldataload                // [0x20, 0x1, to, amount]
    dup2                        // [0x20, 0x1, to, amount, to]
    caller                      // [0x20, 0x1, to, amount, to, caller()]
    dup3                        // [0x20, 0x1, to, amount, to, caller(), amount]
    caller                      // [0x20, 0x1, to, amount, to, caller(), amount, caller()]
    sload                       // [0x20, 0x1, to, amount, to, caller(), amount, senderBalance]
    SAFE_SUB_ERR(<z0>, 0xf4d678b8)
    //                             [0x20, 0x1, to, amount, to, caller(), newSenderBalance]
    caller                      // [0x20, 0x1, to, amount, to, caller(), newSenderBalance, caller()]
    dup5                        // [0x20, 0x1, to, amount, to, caller(), newSenderBalance, caller(), amount]
    0x44                        // [0x20, 0x1, to, amount, to, caller(), newSenderBalance, caller(), amount, 0x44]
    mstore                      // [0x20, 0x1, to, amount, to, caller(), newSenderBalance, caller()]
    sstore                      // [0x20, 0x1, to, amount, to, caller()]
    __EVENT_HASH(Transfer)
    //                             [0x20, 0x1, to, amount, to, caller(), _TRANSFER_EVENT_SIGNATURE]
    0x20                        // [0x20, 0x1, to, amount, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20]
    0x44                        // [0x20, 0x1, to, amount, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, 0x44]
    log3                        // [0x20, 0x1, to, amount]
    dup2                        // [0x20, 0x1, to, amount, to]
    sload                       // [0x20, 0x1, to, amount, sload(to)]
    add                         // [0x20, 0x1, to, add(sload(to), amount)]
    dup2                        // [0x20, 0x1, to, add(sload(to), amount), to]
    sstore                      // [0x20, 0x1, to]
    _TRANSFER_HOOK(<z0>)        // [0x20, 0x1]
    <z0>                        // [0x20, 0x1, z0]
    mstore                      // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro _TRANSFER_HOOK(z0) = takes(1) returns(0) {
    // takes:                      [to]
    <z0>                        // [to, z0]
    0x20                        // [to, z0, 0x20]
    <z0>                        // [to, z0, 0x20, z0]
    0x60                        // [to, z0, 0x20, z0, 0x60]
    calldatasize                // [to, z0, 0x20, z0, 0x60, calldatasize()]
    add                         // [to, z0, 0x20, z0, add(calldatasize(), 0x60)]
    <z0>                        // [to, z0, 0x20, z0, add(calldatasize(), 0x60), z0]
    <z0>                        // [to, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0]
    __FUNC_SIG("onTransferReceived(address,address,uint256,bytes)")    // [to, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, SIG_onTransferReceived]
    0xe0                        // [to, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, SIG_onTransferReceived, 0xe0]
    shl                         // [to, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, shiftedFunctionSig]
    swap7                       // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to]
    gas                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas()]
    0x80                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80]
    0x64                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64]
    caller                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller()]
    0x4                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4]
    dup13                       // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig]
    0x44                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig, 0x44]
    calldatasize                // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig, 0x44, calldatasize()]
    sub                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig, sub(calldatasize(), 0x44)]
    0x44                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig, sub(calldatasize(), 0x44), 0x44]
    0x64                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig, sub(calldatasize(), 0x44), 0x44, 0x64]
    calldatacopy                // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig]
    <z0>                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4, shiftedFunctionSig, z0]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x4]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64]
    caller                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller()]
    0x24                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64, caller(), 0x24]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas()]
    call                        // [shiftedFunctionSig, z0, callOk]
    _REQUIRE(<z0>, 0x85b16394)  // [shiftedFunctionSig, z0]
    mload                       // [shiftedFunctionSig, ret]
    eq                          // [eq(ret, shiftedFunctionSig)]
    _REQUIRE(<z0>, 0x85b16394)  // []
    // returns:                    []
}
// balls-insert-end

// balls-insert-start
#define macro TRANSFER_FROM_AND_CALL(z0) = takes(0) returns(0) {
    // takes:                      []
    0x20                        // [0x20]
    [ADDRESS_MASK]              // [0x20, ADDRESS_MASK]
    0x24                        // [0x20, ADDRESS_MASK, 0x24]
    calldataload                // [0x20, ADDRESS_MASK, calldataload(0x24)]
    and                         // [0x20, to]
    [ADDRESS_MASK]              // [0x20, to, ADDRESS_MASK]
    0x4                         // [0x20, to, ADDRESS_MASK, 0x4]
    calldataload                // [0x20, to, ADDRESS_MASK, calldataload(0x4)]
    and                         // [0x20, to, from]
    0x44                        // [0x20, to, from, 0x44]
    calldataload                // [0x20, to, from, amount]
    dup1                        // [0x20, to, from, amount, amount]
    caller                      // [0x20, to, from, amount, amount, caller()]
    dup4                        // [0x20, to, from, amount, amount, caller(), from]
    _USE_ALLOWANCE(<z0>)        // [0x20, to, from, amount]
    dup3                        // [0x20, to, from, amount, to]
    dup3                        // [0x20, to, from, amount, to, from]
    dup4                        // [0x20, to, from, amount, to, from, from]
    sload                       // [0x20, to, from, amount, to, from, fromBalance]
    pop                         // [0x20, to, from, amount, to, from]
    _TRANSFER_FROM(<z0>, 0x44)  // [0x20, to, from]
    _TRANSFER_FROM_HOOK(<z0>)   // [0x20]
    0x1                         // [0x20, 0x1]
    <z0>                        // [0x20, 0x1, z0]
    mstore                      // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}
// balls-insert-end

// balls-insert-start
#define macro _DO_TRANSFER_FROM_CALL(z0) = takes(2) returns(0) {
    // takes:                      [shiftedFunctionSig, to]
    0x20                        // [shiftedFunctionSig, to, 0x20]
    <z0>                        // [shiftedFunctionSig, to, 0x20, z0]
    calldatasize                // [shiftedFunctionSig, to, 0x20, z0, calldatasize()]
    0x60                        // [shiftedFunctionSig, to, 0x20, z0, calldatasize(), 0x60]
    add                         // [shiftedFunctionSig, to, 0x20, z0, size]
    <z0>                        // [shiftedFunctionSig, to, 0x20, z0, size, z0]
    <z0>                        // [shiftedFunctionSig, to, 0x20, z0, size, z0, z0]
    <z0>                        // [shiftedFunctionSig, to, 0x20, z0, size, z0, z0, z0]
    swap6                       // [shiftedFunctionSig, z0, 0x20, z0, size, z0, z0, to]
    gas                         // [shiftedFunctionSig, z0, 0x20, z0, size, z0, z0, to, gas()]
    call                        // [shiftedFunctionSig, z0, callOk]
    _REQUIRE(<z0>, 0x85b16394)  // [shiftedFunctionSig, z0]
    mload                       // [shiftedFunctionSig, ret]
    eq                          // [eq(ret, shiftedFunctionSig)]
    _REQUIRE(<z0>, 0x85b16394)  // []
    // returns:                    []
}

#define macro _TRANSFER_FROM_HOOK(z0) = takes(2) returns(0) {
    // takes:                      [to, from]
    swap1                       // [from, to]
    0x80                        // [from, to, 0x80]
    0x64                        // [from, to, 0x80, 0x64]
    __FUNC_SIG("onTransferReceived(address,address,uint256,bytes)")    // [from, to, 0x80, 0x64, SIG_onTransferReceived]
    0xe0                        // [from, to, 0x80, 0x64, SIG_onTransferReceived, 0xe0]
    shl                         // [from, to, 0x80, 0x64, shiftedFunctionSig]
    swap4                       // [shiftedFunctionSig, to, 0x80, 0x64, from]
    0x24                        // [shiftedFunctionSig, to, 0x80, 0x64, from, 0x24]
    dup6                        // [shiftedFunctionSig, to, 0x80, 0x64, from, 0x24, shiftedFunctionSig]
    <z0>                        // [shiftedFunctionSig, to, 0x80, 0x64, from, 0x24, shiftedFunctionSig, z0]
    0x64                        // [shiftedFunctionSig, to, 0x80, 0x64, from, 0x24, shiftedFunctionSig, z0, 0x64]
    calldatasize                // [shiftedFunctionSig, to, 0x80, 0x64, from, 0x24, shiftedFunctionSig, z0, 0x64, calldatasize()]
    sub                         // [shiftedFunctionSig, to, 0x80, 0x64, from, 0x24, shiftedFunctionSig, z0, sub(calldatasize(), 0x64)]
    0x64                        // [shiftedFunctionSig, to, 0x80, 0x64, from, 0x24, shiftedFunctionSig, z0, sub(calldatasize(), 0x64), 0x64]
    0x64                        // [shiftedFunctionSig, to, 0x80, 0x64, from, 0x24, shiftedFunctionSig, z0, sub(calldatasize(), 0x64), 0x64, 0x64]
    calldatacopy                // [shiftedFunctionSig, to, 0x80, 0x64, from, 0x24, shiftedFunctionSig, z0]
    mstore                      // [shiftedFunctionSig, to, 0x80, 0x64, from, 0x24]
    caller                      // [shiftedFunctionSig, to, 0x80, 0x64, from, 0x24, caller()]
    0x4                         // [shiftedFunctionSig, to, 0x80, 0x64, from, 0x24, caller(), 0x4]
    mstore                      // [shiftedFunctionSig, to, 0x80, 0x64, from, 0x24]
    mstore                      // [shiftedFunctionSig, to, 0x80, 0x64]
    mstore                      // [shiftedFunctionSig, to]
    _DO_TRANSFER_FROM_CALL(<z0>)
    //                             []
    // returns:                    []
}
// balls-insert-end

// balls-insert-start
#define macro APPROVE_AND_CALL(z0) = takes(0) returns(0) {
    // takes:                      []
    0x20                        // [0x20]
    <z0>                        // [0x20, z0]
    0x1                         // [0x20, z0, 0x1]
    0x4                         // [0x20, z0, 0x1, 0x4]
    calldataload                // [0x20, z0, 0x1, spender]
    caller                      // [0x20, z0, 0x1, spender, caller()]
    __EVENT_HASH(Approval)
    //                             [0x20, z0, 0x1, spender, caller(), _APPROVAL_EVENT_SIGNATURE]
    0x20                        // [0x20, z0, 0x1, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20]
    0x24                        // [0x20, z0, 0x1, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20, 0x24]
    0x24                        // [0x20, z0, 0x1, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20, 0x24, 0x24]
    calldataload                // [0x20, z0, 0x1, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20, 0x24, amount]
    dup6                        // [0x20, z0, 0x1, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20, 0x24, amount, spender]
    caller                      // [0x20, z0, 0x1, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20, 0x24, amount, spender, caller()]
    GET_SLOT_FROM_KEYS(<z0>)    // [0x20, z0, 0x1, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20, 0x24, amount, slot]
    dup7                        // [0x20, z0, 0x1, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20, 0x24, amount, slot, spender]
    dup3                        // [0x20, z0, 0x1, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20, 0x24, amount, slot, spender, amount]
    0x24                        // [0x20, z0, 0x1, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20, 0x24, amount, slot, spender, amount, 0x24]
    mstore                      // [0x20, z0, 0x1, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20, 0x24, amount, slot, spender]
    _APPROVE_HOOK(<z0>)         // [0x20, z0, 0x1, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20, 0x24, amount, slot]
    sstore                      // [0x20, z0, 0x1, spender, caller(), _APPROVAL_EVENT_SIGNATURE, 0x20, 0x24]
    log3                        // [0x20, z0, 0x1]
    <z0>                        // [0x20, z0, 0x1, z0]
    mstore                      // [0x20, z0]
    return                      // []
    // returns:                    []
}

#define macro _APPROVE_HOOK(z0) = takes(1) returns(0) {
    // takes:                      [spender]
    <z0>                        // [spender, z0]
    0x20                        // [spender, z0, 0x20]
    <z0>                        // [spender, z0, 0x20, z0]
    0x40                        // [spender, z0, 0x20, z0, 0x40]
    calldatasize                // [spender, z0, 0x20, z0, 0x40, calldatasize()]
    add                         // [spender, z0, 0x20, z0, add(calldatasize(), 0x40)]
    <z0>                        // [spender, z0, 0x20, z0, add(calldatasize(), 0x40), z0]
    <z0>                        // [spender, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0]
    __FUNC_SIG("onApprovalReceived(address,uint256,bytes)")    // [spender, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, SIG_onApprovalReceived]
    0xe0                        // [spender, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, SIG_onApprovalReceived, 0xe0]
    shl                         // [spender, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, shiftedFunctionSig]
    swap7                       // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender]
    0x60                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, 0x60]
    0x44                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, 0x60, 0x44]
    dup10                       // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, 0x60, 0x44, shiftedFunctionSig]
    0x44                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, 0x60, 0x44, shiftedFunctionSig, 0x44]
    calldatasize                // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, 0x60, 0x44, shiftedFunctionSig, 0x44, calldatasize()]
    sub                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, 0x60, 0x44, shiftedFunctionSig, sub(calldatasize(), 0x44)]
    0x44                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, 0x60, 0x44, shiftedFunctionSig, sub(calldatasize(), 0x44), 0x44]
    0x44                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, 0x60, 0x44, shiftedFunctionSig, sub(calldatasize(), 0x44), 0x44, 0x44]
    calldatacopy                // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, 0x60, 0x44, shiftedFunctionSig]
    <z0>                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, 0x60, 0x44, shiftedFunctionSig, z0]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, 0x60, 0x44]
    caller                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, 0x60, 0x44, caller()]
    0x4                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, 0x60, 0x44, caller(), 0x4]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, 0x60, 0x44]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender]
    gas                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x40), z0, z0, spender, gas()]
    call                        // [shiftedFunctionSig, z0, callOk]
    _REQUIRE(<z0>, 0x81cbe4db)  // [shiftedFunctionSig, z0]
    mload                       // [shiftedFunctionSig, ret]
    eq                          // [eq(ret, shiftedFunctionSig)]
    _REQUIRE(<z0>, 0x81cbe4db)  // []
    // returns:                    []
}
// balls-insert-end