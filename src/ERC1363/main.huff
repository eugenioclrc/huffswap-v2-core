/// @title ERC1363 Payable token
/// @notice SPDX-License-Identifier: MIT
/// @author 0x4non
/// @notice Some ideas were taken from Solmate, Solady and Huffmate

#include "../ERC20/main.huff"

// Interface

#define function approveAndCall(address,uint256,bytes) nonpayable returns ()
#define function transferAndCall(address,uint256,bytes) nonpayable returns ()

// Events
#define event Approval(address indexed, address indexed, uint256)
#define event Transfer(address, address, uint256)

// Errors
#define error InsufficientBalance()
#define error InsufficientAllowance()

#define constant ADDRESS_MASK = 0xffffffffffffffffffffffffffffffffffffffff

#define macro TRANSFER_AND_CALL(z0) = takes(0) returns(0) {
    // takes:                      []
    __FUNC_SIG("onTransferReceived(address,address,uint256,bytes)")    // __FUNC_SIG("onTransferReceived(address,address,uint256,bytes)")
    0xe0                        // [SIG_onTransferReceived, 0xe0]
    shl                         // [shiftedFunctionSig]
    <z0>                        // [shiftedFunctionSig, z0]
    0x20                        // [shiftedFunctionSig, z0, 0x20]
    <z0>                        // [shiftedFunctionSig, z0, 0x20, z0]
    0x60                        // [shiftedFunctionSig, z0, 0x20, z0, 0x60]
    calldatasize                // [shiftedFunctionSig, z0, 0x20, z0, 0x60, calldatasize()]
    add                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60)]
    <z0>                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0]
    <z0>                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0]
    [ADDRESS_MASK]              // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, ADDRESS_MASK]
    0x4                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, ADDRESS_MASK, 0x4]
    calldataload                // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, ADDRESS_MASK, calldataload(0x4)]
    and                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to]
    gas                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas()]
    0x80                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80]
    0x24                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x24]
    calldataload                // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount]
    0x44                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44]
    dup2                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, amount]
    caller                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, amount, caller()]
    sload                       // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, amount, senderBalance]
    SAFE_SUB_ERR(<z0>, 0xf4d678b8)
    //                             [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, newSenderBalance]
    caller                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, newSenderBalance, caller()]
    sstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44]
    dup2                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, amount]
    dup6                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, amount, to]
    sload                       // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, amount, sload(to)]
    add                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount)]
    dup13                       // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig]
    <z0>                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0]
    0x44                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0, 0x44]
    calldatasize                // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0, 0x44, calldatasize()]
    sub                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0, sub(calldatasize(), 0x44)]
    0x44                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0, sub(calldatasize(), 0x44), 0x44]
    0x64                        // [..., z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0, sub(calldatasize(), 0x44), 0x44, 0x64]
    dup8                        // [..., 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0, sub(calldatasize(), 0x44), 0x44, 0x64, amount]
    <z0>                        // [..., z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0, sub(calldatasize(), 0x44), 0x44, 0x64, amount, z0]
    mstore                      // [..., z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0, sub(calldatasize(), 0x44), 0x44, 0x64]
    dup11                       // [..., 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0, sub(calldatasize(), 0x44), 0x44, 0x64, to]
    caller                      // [..., z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0, sub(calldatasize(), 0x44), 0x44, 0x64, to, caller()]
    __EVENT_HASH(Transfer)
    //                             [..., add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0, sub(calldatasize(), 0x44), 0x44, 0x64, to, caller(), _TRANSFER_EVENT_SIGNATURE]
    0x20                        // [..., z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0, sub(calldatasize(), 0x44), 0x44, 0x64, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20]
    <z0>                        // [..., z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0, sub(calldatasize(), 0x44), 0x44, 0x64, to, caller(), _TRANSFER_EVENT_SIGNATURE, 0x20, z0]
    log3                        // [..., z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0, sub(calldatasize(), 0x44), 0x44, 0x64]
    calldatacopy                // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), shiftedFunctionSig, z0]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount)]
    dup6                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), to]
    caller                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), to, caller()]
    0x4                         // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), to, caller(), 0x4]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, add(sload(to), amount), to]
    sstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44]
    caller                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, caller()]
    0x24                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44, caller(), 0x24]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, amount, 0x44]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80]
    0x64                        // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas(), 0x80, 0x64]
    mstore                      // [shiftedFunctionSig, z0, 0x20, z0, add(calldatasize(), 0x60), z0, z0, to, gas()]
    call                        // [shiftedFunctionSig, z0, callOk]
    swap2                       // [callOk, z0, shiftedFunctionSig]
    <z0>                        // [callOk, z0, shiftedFunctionSig, z0]
    mload                       // [callOk, z0, shiftedFunctionSig, ret]
    dup4                        // [callOk, z0, shiftedFunctionSig, ret, callOk]
    _REQUIRE(<z0>, 0x85b16394)  // [callOk, z0, shiftedFunctionSig, ret]
    eq                          // [callOk, z0, eq(ret, shiftedFunctionSig)]
    _REQUIRE(<z0>, 0x85b16394)  // [callOk, z0]
    mstore                      // []
    0x20                        // [0x20]
    <z0>                        // [0x20, z0]
    return                      // []
    // returns:                    []
}
